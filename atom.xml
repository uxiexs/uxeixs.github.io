<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blue&#39;s blog</title>
  <subtitle>stay hungry stay foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//litten.me/"/>
  <updated>2017-03-20T10:16:53.134Z</updated>
  <id>//litten.me/</id>
  
  <author>
    <name>Blue</name>
    <email>uxeixs@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pandoc</title>
    <link href="//litten.me/2017/03/20/pandoc/"/>
    <id>//litten.me/2017/03/20/pandoc/</id>
    <published>2017-03-20T08:52:26.000Z</published>
    <updated>2017-03-20T10:16:53.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這份文件是 <a href="http://johnmacfarlane.net/pandoc/" target="_blank" rel="external">Pandoc</a> 版本 Markdown 語法的中文翻譯。Pandoc 本身是由 <a href="http://johnmacfarlane.net/" target="_blank" rel="external">John MacFarlane</a> 所開發的文件轉換工具，可以在 HTML, Markdown, PDF, TeX…等等格式之間進行轉換。有許多喜歡純文字編輯的人，利用 Pandoc 來進行論文的撰寫或投影片製作。但除了轉換的功能外，Pandoc 所定義的 Markdown 擴充語法也是這套工具的一大亮點，在 Pandoc 的官方使用說明文件中，光是其針對 Markdown 格式的擴充就佔了整整一半左右的篇幅。 </p>
<a id="more"></a>
<p>本文件翻譯自 <a href="http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown" target="_blank" rel="external">Pandoc - Pandoc User’s Guide</a> 中的 “Pandoc’s markdown” 一節。你可以看看<a href="https://raw.github.com/tzengyuxio/pages/gh-pages/pandoc/pandoc.markdown" target="_blank" rel="external">這份文件的原始檔</a>、產生文件<a href="https://github.com/tzengyuxio/pages/blob/gh-pages/pandoc/pm-template.html5" target="_blank" rel="external">所使用的 HTML 範本</a>，以及<a href="https://github.com/tzengyuxio/pages/blob/gh-pages/pandoc/convert.sh" target="_blank" rel="external">轉換時的命令參數</a>。</p>
<p>以下翻譯開始。</p>
<hr>
<h1 id="Pandoc’s-markdown"><a href="#Pandoc’s-markdown" class="headerlink" title="Pandoc’s markdown"></a>Pandoc’s markdown</h1><p>與 John Gruber 的 原始 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">markdown</a> 相比，Pandoc 版本的 markdown 在語法上有額外的擴充與些許的修正。這份文件解釋了這些語法，並指出其與原始 markdown 的差異所在。除非特別提到，不然這些差異均可藉由使用 <code>markdown_strict</code> 而非 <code>markdown</code> 的格式來關閉。單獨一項擴充也可透過 <code>+EXTENSION</code> 或 <code>-EXTENSION</code> 的方式來開啟或關閉。例如，<code>markdown_strict+footnotes</code> 表示加上腳註擴充的原始 markdown，而 <code>markdown-footnotes-pipe_tables</code> 則是拿掉了腳註與管線表格擴充的 pandoc markdown。</p>
<h2 id="哲學"><a href="#哲學" class="headerlink" title="哲學"></a>哲學</h2><p>Markdown 是針對易於書寫與閱讀的目標而設計的，特別是在易於閱讀這點上尤為重要：</p>
<blockquote>
<p>一份 Markdown 格式的文件應該要能以純文字形式直接發表，並且一眼看過去不存在任何標記用的標籤或格式指令。<br><small><a href="http://daringfireball.net/projects/markdown/syntax#philosophy" target="_blank" rel="external">John Gruber</a></small></p>
</blockquote>
<p>這項原則同樣也是 pandoc 在制訂表格、腳註以及其他擴充的語法時，所依循的規範。</p>
<p>然而，pandoc 的目標與原始 markdown 的最初目標有著方向性的不同。在 markdown 原本的設計中，HTML 是其主要輸出對象；然而 pandoc 則是針對多種輸出格式而設計。因此，雖然 pandoc 同樣也允許直接嵌入 HTML 標籤，但並不鼓勵這樣的作法，取而代之的是 pandoc 提供了許多非 HTML 的方式，來讓使用者輸入像是定義清單、表格、數學公式以及腳註等諸如此類的重要文件元素。</p>
<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>一個段落指的是一行以上的文字，跟在一行以上的空白行之後。換行字元會被當作是空白處理，因此你可以依自己喜好排列段落文字。如果你需要強制換行，在行尾放上兩個以上的空白字元即可。</p>
<p><strong>Extension: <code>escaped_line_breaks</code></strong></p>
<p>一個反斜線後跟著一個換行字元，同樣也有強制換行的效果。</p>
<h2 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h2><p>有兩種不同形式的標題語法，Setext 以及 atx。</p>
<h3 id="Setext-風格標題"><a href="#Setext-風格標題" class="headerlink" title="Setext 風格標題"></a>Setext 風格標題</h3><p>Setext 風格的標題是由一行文字底下接著一行 <code>=</code> 符號（用於一階標題）或 <code>-</code> 符號（用於二階標題）所構成：</p>
<pre><code>A level-one header
==================

A level-two header
------------------
</code></pre><p>標題的文字可以包含行內格式，例如強調（見下方 [行內格式] 一節）。</p>
<h3 id="Atx-風格標題"><a href="#Atx-風格標題" class="headerlink" title="Atx 風格標題"></a>Atx 風格標題</h3><p>Atx 風格的標題是由一到六個 <code>#</code> 符號以及一行文字所組成，你可以在文字後面加上任意數量的 <code>#</code> 符號。由行首起算的 <code>#</code> 符號數量決定了標題的階層：</p>
<pre><code>## A level-two header

### A level-three header ###
</code></pre><p>如同 setext 風格標題，這裡的標題文字同樣可包含行內格式：</p>
<pre><code># A level-one header with a [link](/url) and *emphasis*
</code></pre><p><strong>Extension: <code>blank_before_header</code></strong></p>
<p>原始 markdown 語法在標題之前並不需要預留空白行。Pandoc 則需要（除非標題位於文件最開始的地方）。這是因為以 <code>#</code> 符號開頭的情況在一般文字段落中相當常見，這會導致非預期的標題。例如下面的例子：</p>
<pre><code>I like several of their flavors of ice cream:
#22, for example, and #5.
</code></pre><h3 id="HTML-LaTeX-與-ConTeXt-的標題識別符"><a href="#HTML-LaTeX-與-ConTeXt-的標題識別符" class="headerlink" title="HTML, LaTeX 與 ConTeXt 的標題識別符"></a>HTML, LaTeX 與 ConTeXt 的標題識別符</h3><p><strong>Extension: <code>header_attributes</code></strong></p>
<p>在標題文字所在行的行尾，可以使用以下語法為標題加上屬性：</p>
<pre><code>{#identifier .class .class key=value key=value}
</code></pre><p>雖然這個語法也包含加入類別 (class) 以及鍵／值形式的屬性 (attribute)，但目前只有識別符 (identifier/ID) 在輸出時有實際作用（且只在部分格式的輸出，包括：HTML, LaTeX, ConTeXt, Textile, AsciiDoc）。舉例來說，下面是將標題加上 <code>foo</code> 識別符的幾種方法：</p>
<pre><code># My header {#foo}

## My header ##    {#foo}

My other header   {#foo}
---------------
</code></pre><p>（此語法與 <a href="http://www.michelf.com/projects/php-markdown/extra/" target="_blank" rel="external">PHP Markdown Extra</a> 相容。）</p>
<p>具有 <code>unnumbered</code> 類別的標題將不會被編號，即使 <code>--number-sections</code> 的選項是開啟的。單一連字符號 (<code>-</code>) 等同於 <code>.unnumbered</code>，且更適用於非英文文件中。因此，</p>
<pre><code># My header {-}
</code></pre><p>與下面這行是等價的</p>
<pre><code># My header {.unnumbered}
</code></pre><p><strong>Extension: <code>auto_identifiers</code></strong></p>
<p>沒有明確指定 ID（識別符）的標題將會依據其標題文字，自動指派一個獨一無二的 ID。由標題文字推導 ID 的規則如下：</p>
<ul>
<li>移除所有格式，連結等。<ul>
<li>移除所有標點符號，除了底線、連字符號與句號。</li>
<li>以連字符號取代所有空白與換行字元。</li>
<li>將所有英文字母轉為小寫。</li>
<li>移除第一個字元前的所有內容（ID 不能以數字或標點符號開頭）。</li>
<li>如果剩下為空字串，則使用 <code>section</code> 作為 ID。</li>
</ul>
</li>
</ul>
<p>以下是一些範例，</p>
<p>  Header                            Identifier</p>
<hr>
<p>  Header identifiers in HTML        <code>header-identifiers-in-html</code><br>  <em>Dogs</em>?–in <em>my</em> house?           <code>dogs--in-my-house</code><br>  [HTML], [S5], or [RTF]?           <code>html-s5-or-rtf</code></p>
<ol>
<li>Applications                   <code>applications</code><br>33                                <code>section</code></li>
</ol>
<p>在大多數情況下，這些規則應該讓人能夠直接從標題文字推導出 ID。唯一的例外是當有多個標題具有同樣文字的情況；在這情況下，第一個標題的 ID 仍舊是透過以上規則推導而得；第二個則是在同樣 ID 後加上 <code>-1</code>；第三個加上 <code>-2</code>；以此類推。</p>
<p>在開啟 <code>--toc|--table-of-contents</code> 的選項時，這些 ID 是用來產生目錄 (Table of Contents) 所需的頁面連結。此外，這些 ID 也提供了一個簡便的方式來輸入跳到指定章節的連結。一個以 ID 產生的連結，其使用的語法看起來就像下面的例子：</p>
<pre><code>See the section on
[header identifiers](#header-identifiers-in-html-latex-and-context).
</code></pre><p>然而要注意的一點是，只有在以 HTML、LaTeX 與 ConTeXt 格式輸出時，才能以這種方式產生對應的章節連結。</p>
<p>如果指定了 <code>--section-divs</code> 選項，則每一個小節都會以 <code>div</code> 標籤包住（或是 <code>section</code> 標籤，如果有指定 <code>--html5</code> 選項的話），並且 ID 會被附加在用來包住小節的 <code>&lt;div&gt;</code>（或是 <code>&lt;section&gt;</code>）標籤，而非附加在標題上。這使得整個小節都可以透過 javascript 來操作，或是採用不同的 CSS 設定。</p>
<p><strong>Extension: <code>implicit_header_references</code></strong></p>
<p>Pandoc 假設每個標題都定義了其參考連結，因此，相較於以下的連結語法</p>
<pre><code>[header identifiers](#header-identifiers-in-html)
</code></pre><p>你也可以單純只寫</p>
<pre><code>[header identifiers]
</code></pre><p>或</p>
<pre><code>[header identifiers][]
</code></pre><p>或</p>
<pre><code>[the section on header identifiers][header identifiers]
</code></pre><p>如果有多個標題具有同樣文字，對應的參考只會連結到第一個符合的標題，這時若要連結到其他符合的標題，就必須以先前提到的方式，明確指定連結到該標題的 ID。</p>
<p>與其他一般參考連結不同的是，這些參考連結是大小寫有別的。</p>
<p>注意：如果你有明確定義了任何一個標題的標示符，那麼選項 <code>implicit_header_references</code> 就沒有作用。</p>
<h2 id="區塊引言"><a href="#區塊引言" class="headerlink" title="區塊引言"></a>區塊引言</h2><p>Markdown 使用 email 的習慣來建立引言區塊。一個引言區塊可以由一或多個段落或其他的區塊元素（如清單或標題）組成，並且其行首均是由一個 <code>&gt;</code> 符號加上一個空白作為開頭。（<code>&gt;</code> 符號不一定要位在該行最左邊，但也不能縮進超過三個空白）。</p>
<pre><code>&gt; This is a block quote. This
&gt; paragraph has two lines.
&gt;
&gt; 1. This is a list inside a block quote.
&gt; 2. Second item.
</code></pre><p>有一個「偷懶」的形式：你只需要在引言區塊的第一行行首輸入 <code>&gt;</code> 即可，後面的行首可以省略符號：</p>
<pre><code>&gt; This is a block quote. This
paragraph has two lines.

&gt; 1. This is a list inside a block quote.
2. Second item.
</code></pre><p>由於區塊引言可包含其他區塊元素，而區塊引言本身也是區塊元素，所以，引言是可以嵌套入其他引言的。</p>
<pre><code>&gt; This is a block quote.
&gt;
&gt; &gt; A block quote within a block quote.
</code></pre><p><strong>Extension: <code>blank_before_blockquote</code></strong></p>
<p>原始 markdown 語法在區塊引言之前並不需要預留空白行。Pandoc 則需要（除非區塊引言位於文件最開始的地方）。這是因為以 <code>&gt;</code> 符號開頭的情況在一般文字段落中相當常見（也許由於斷行所致），這會導致非預期的格式。因此，除非是指定為 <code>markdown_strict</code> 格式，不然以下的語法在 pandoc 中將不會產生出嵌套區塊引言：</p>
<pre><code>&gt; This is a block quote.
&gt;&gt; Nested.
</code></pre><h2 id="字面（代碼）區塊"><a href="#字面（代碼）區塊" class="headerlink" title="字面（代碼）區塊"></a>字面（代碼）區塊</h2><h3 id="縮進代碼區塊"><a href="#縮進代碼區塊" class="headerlink" title="縮進代碼區塊"></a>縮進代碼區塊</h3><p>一段以四個空白（或一個 tab）縮進的文字區塊會被視為字面區塊 (Verbatim Block)：換句話說，特殊字元並不會轉換為任何格式，單純只以字面形式呈現，而所有的空白與換行也都會被保留。例如，</p>
<pre><code>if (a &gt; 3) {
  moveShip(5 * gravity, DOWN);
}
</code></pre><p>位於行首的縮排（四個空白或一個 tab）並不會被視為字面區塊的一部分，因此在輸出時會被移除掉。</p>
<p>注意：在字面文字之間的空白行並不需要也以四個空白字元做開頭。</p>
<h3 id="圍欄代碼區塊"><a href="#圍欄代碼區塊" class="headerlink" title="圍欄代碼區塊"></a>圍欄代碼區塊</h3><p><strong>Extension: <code>fenced_code_blocks</code></strong></p>
<p>除了標準的縮進代碼區塊外，Pandoc 也支援了<strong>圍欄</strong> (<em>fenced</em>) 代碼區塊的語法。這區塊需以包含三個以上波浪線 (<code>~</code>) 或反引號 (<code>` </code>) 的一行作為開始，並以同樣符號且至少同樣長度的一行作為結束。所有介於開始與結束之間的文字行都會視為代碼。不需要額外的縮進：</p>
<pre><code>​<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="comment">(a &gt; 3)</span> &#123;</div><div class="line">  moveShip<span class="comment">(5 * gravity, DOWN)</span>;</div><div class="line">&#125;</div><div class="line">​</div></pre></td></tr></table></figure>
</code></pre><p>如同一般的代碼區塊，圍欄代碼區塊與其前後的文字之間必須以空白行作間隔。</p>
<p>如果代碼本身也包含了一整行的波浪線或反引號，那麼只要在區塊首尾處使用更長的波浪線或反引號即可：</p>
<pre><code>​<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">​~~~~~~~~~~</div><div class="line"><span class="selector-tag">code</span> including tildes</div><div class="line">​~~~~~~~~~~</div><div class="line">​</div></pre></td></tr></table></figure>
</code></pre><p>你也可以選擇性地使用以下語法附加屬性到代碼區塊上：</p>
<pre><code>​<figure class="highlight plain"><figcaption><span>.haskell .numberLines startFrom="100"&#125;</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">qsort []     = []</div><div class="line">qsort (x:xs) = qsort (filter (&lt; x) xs) ++ [x] ++</div><div class="line">               qsort (filter (&gt;= x) xs)</div><div class="line">​~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</div></pre></td></tr></table></figure>
</code></pre><p>這裡的 <code>mycode</code> 為 ID，<code>haskell</code> 與 <code>numberLines</code> 是類別，而 <code>startsFrom</code> 則是值為 <code>100</code> 的屬性。有些輸出格式可以利用這些資訊來作語法高亮。目前有使用到這些資訊的輸出格式僅有 HTML 與 LaTeX。如果指定的輸出格式及語言類別有支援語法高亮，那麼上面那段代碼區塊將會以高亮並帶有行號的方式呈現。（要查詢支援的程式語言清單，可在命令列輸入 <code>pandoc --version</code>。）反之若無支援，則上面那段代碼區塊則會以下面的形式呈現：</p>
<pre><code>&lt;pre id=&quot;mycode&quot; class=&quot;haskell numberLines&quot; startFrom=&quot;100&quot;&gt;
  &lt;code&gt;
  ...
  &lt;/code&gt;
&lt;/pre&gt;
</code></pre><p>下面這個是針對代碼區塊只有指定程式語言屬性的簡便形式：</p>
<pre><code>​<figure class="highlight haskell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="title">qsort</span> [] = []</div><div class="line">​</div></pre></td></tr></table></figure>
</code></pre><p>這與下面這行的效果是相同的：</p>
<pre><code>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">qsort [] = []</div><div class="line">​</div></pre></td></tr></table></figure>
</code></pre><p>要取消所有語法高亮，使用 <code>--no-highlight</code> 選項。要設定語法高亮的配色，則使用 <code>--highlight-style</code>。</p>
<h2 id="行區塊"><a href="#行區塊" class="headerlink" title="行區塊"></a>行區塊</h2><p><strong>Extension: <code>line_blocks</code></strong></p>
<p>行區塊是一連串以豎線 (<code>|</code>) 加上一個空格所構成的連續行。行與行間的區隔在輸出時將會以原樣保留，行首的空白字元數目也一樣會被保留；反之，這些行將會以 markdown 的格式處理。這個語法在輸入詩句或地址時很有幫助。</p>
<pre><code>| The limerick packs laughs anatomical
| In space that is quite economical.
|    But the good ones I&apos;ve seen
|    So seldom are clean
| And the clean ones so seldom are comical

| 200 Main St.
| Berkeley, CA 94718
</code></pre><p>如果有需要的話，書寫時也可以將完整一行拆成多行，但後續行必須以空白作為開始。下面範例的前兩行在輸出時會被視為一整行：</p>
<pre><code>| The Right Honorable Most Venerable and Righteous Samuel L.
  Constable, Jr.
| 200 Main St.
| Berkeley, CA 94718
</code></pre><p>這是從 <a href="http://docutils.sourceforge.net/docs/ref/rst/introduction.html" target="_blank" rel="external">reStructuredText</a> 借來的語法。</p>
<h2 id="清單"><a href="#清單" class="headerlink" title="清單"></a>清單</h2><h3 id="無序清單"><a href="#無序清單" class="headerlink" title="無序清單"></a>無序清單</h3><p>無序清單是以項目符號作列舉的清單。每條項目都以項目符號 (<code>*</code>, <code>+</code> 或 <code>-</code>) 作開頭。下面是個簡單的例子：</p>
<pre><code>* one
* two
* three
</code></pre><p>這會產生一個「緊湊」清單。如果你想要一個「寬鬆」清單，也就是說以段落格式處理每個項目內的文字內容，那麼只要在每個項目間加上空白行即可：</p>
<pre><code>* one

* two

* three
</code></pre><p>項目符號不能直接從行首最左邊處輸入，而必須以一至三個空白字元作縮進。項目符號後必須跟著一個空白字元。</p>
<p>清單項目中的接續行，若與該項目的第一行文字對齊（在項目符號之後），看上去會較為美觀：</p>
<pre><code>* here is my first
  list item.
* and my second.
</code></pre><p>但 markdown 也允許以下「偷懶」的格式：</p>
<pre><code>* here is my first
list item.
* and my second.
</code></pre><h3 id="四個空白規則"><a href="#四個空白規則" class="headerlink" title="四個空白規則"></a>四個空白規則</h3><p>一個清單項目可以包含多個段落以及其他區塊等級的內容。然而，後續的段落必須接在空白行之後，並且以四個空白或一個 tab 作縮進。因此，如果項目裡第一個段落與後面段落對齊的話（也就是項目符號前置入兩個空白），看上去會比較整齊美觀：</p>
<pre><code>* First paragraph.

  Continued.

* Second paragraph. With a code block, which must be indented
  eight spaces:

      { code }
</code></pre><p>清單項目也可以包含其他清單。在這情況下前置的空白行是可有可無的。嵌套清單必須以四個空白或一個 tab 作縮進：</p>
<pre><code>* fruits
    + apples
        - macintosh
        - red delicious
    + pears
    + peaches
* vegetables
    + brocolli
    + chard
</code></pre><p>上一節提到，markdown 允許你以「偷懶」的方式書寫，項目的接續行可以不和第一行對齊。不過，如果一個清單項目中包含了多個段落或是其他區塊元素，那麼每個元素的第一行都必須縮進對齊。</p>
<pre><code>+ A lazy, lazy, list
item.

+ Another one; this looks
bad but is legal.

    Second paragraph of second
list item.
</code></pre><p><strong>注意：</strong>儘管針對接續段落的「四個空白規則」是出自於官方的 [markdown syntax guide]，但是作為對應參考用的 <code>Markdown.pl</code> 實作版本中並未遵循此一規則。所以當輸入時若接續段落的縮進少於四個空白時，pandoc 所輸出的結果會與 <code>Markdown.pl</code> 的輸出有所出入。</p>
<p>在 [markdown syntax guide] 中並未明確表示「四個空白規則」是否一體適用於 <strong>所有</strong> 位於清單項目裡的區塊元素上；規範文件中只提及了段落與代碼區塊。但文件暗示了此規則適用於所有區塊等級的內容（包含嵌套清單），並且 pandoc 以此方向進行解讀與實作。</p>
<p>  [markdown syntax guide]:<br>    <a href="http://daringfireball.net/projects/markdown/syntax#list" target="_blank" rel="external">http://daringfireball.net/projects/markdown/syntax#list</a></p>
<h3 id="有序清單"><a href="#有序清單" class="headerlink" title="有序清單"></a>有序清單</h3><p>有序清單與無序清單相類似，唯一的差別在於清單項目是以列舉編號作開頭，而不是項目符號。</p>
<p>在原始 markdown 中，列舉編號是阿拉伯數字後面接著一個句點與空白。數字本身代表的數值會被忽略，因此下面兩個清單並無差別：</p>
<pre><code>1.  one
2.  two
3.  three
</code></pre><p>上下兩個清單的輸出是相同的。</p>
<pre><code>5.  one
7.  two
1.  three
</code></pre><p><strong>Extension: <code>fancy_lists</code></strong></p>
<p>與原始 markdown 不同的是，Pandoc 除了使用阿拉伯數字作為有序清單的編號外，也可以使用大寫或小寫的英文字母，以及羅馬數字。清單標記可以用括號包住，也可以單獨一個右括號，抑或是句號。如果清單標記是大寫字母接著一個句號，句號後請使用至少兩個空白字元。<a href="之所以有這條規則，主要是要避免以人名頭文字縮寫作為開頭的段落所帶來的混淆，像是">^2</a></p>
<pre><code>    B. Russell was an English philosopher.

這樣就不會被當作清單項目了。

這條規則並不會避免以下

    (C) 2007 Joe Smith

這樣的敘述被解釋成清單項目。在這情形下，可以使用反斜線：

    (C\) 2007 Joe Smith
</code></pre><p><strong>Extension: <code>startnum</code></strong></p>
<p>除了清單標記外，Pandoc 也能判讀清單的起始編號，這兩項資訊都會保留於輸出格式中。舉例來說，下面的輸入可以產生一個從編號 9 開始，以單括號為編號標記的清單，底下還跟著一個小寫羅馬數字的子清單：</p>
<pre><code> 9)  Ninth
10)  Tenth
11)  Eleventh
       i. subone
      ii. subtwo
     iii. subthree
</code></pre><p>當遇到不同形式的清單標記時，Pandoc 會重新開始一個新的清單。所以，以下的輸入會產生三份清單：</p>
<pre><code>(2) Two
(5) Three
1.  Four
*   Five
</code></pre><p>如果需要預設的有序清單標記符號，可以使用 <code>#.</code>：</p>
<pre><code>#.  one
#.  two
#.  three
</code></pre><h3 id="定義清單"><a href="#定義清單" class="headerlink" title="定義清單"></a>定義清單</h3><p><strong>Extension: <code>definition_lists</code></strong></p>
<p>Pandoc 支援定義清單，其語法的靈感來自於 <a href="http://www.michelf.com/projects/php-markdown/extra/" target="_blank" rel="external">PHP Markdown Extra</a> 以及 <a href="http://docutils.sourceforge.net/docs/ref/rst/introduction.html" target="_blank" rel="external">reStructuredText</a>：[^3]</p>
<pre><code>Term 1

:   Definition 1

Term 2 with *inline markup*

:   Definition 2

        { some code, part of Definition 2 }

    Third paragraph of definition 2.
</code></pre><p>每個專有名詞 (term) 都必須單獨存在於一行，後面可以接著一個空白行，也可以省略，但一定要接上一或多筆定義內容。一筆定義需由一個冒號或波浪線作開頭，可以接上一或兩個空白作為縮進。定義本身的內容主體（包括接在冒號或波浪線後的第一行）應該以四個空白縮進。一個專有名詞可以有多個定義，而每個定義可以包含一或多個區塊元素（段落、代碼區塊、清單等），每個區塊元素都要縮進四個空白或一個 tab。</p>
<p>如果你在定義內容後面留下空白行（如同上面的範例），那麼該段定義會被當作段落處理。在某些輸出格式中，這意謂著成對的專有名詞與定義內容間會有較大的空白間距。在定義與定義之間，以及定義與下個專有名詞間不要留空白行，即可產生一個比較緊湊的定義清單：</p>
<pre><code>Term 1
  ~ Definition 1
Term 2
  ~ Definition 2a
  ~ Definition 2b
</code></pre><p>[^3]: <a href="http://www.justatheory.com/computers/markup/modest-markdown-proposal.html" target="_blank" rel="external">David Wheeler</a> 對於 markdown 的建議也同時影響了我。</p>
<h3 id="編號範例清單"><a href="#編號範例清單" class="headerlink" title="編號範例清單"></a>編號範例清單</h3><p><strong>Extension: <code>example_lists</code></strong></p>
<p>這個特別的清單標記 <code>@</code> 可以用來產生連續編號的範例清單。清單中第一個以 <code>@</code> 標記的項目會被編號為 ‘1’，接著編號為 ‘2’，依此類推，直到文件結束。範例項目的編號不會侷限於單一清單中，而是文件中所有以 <code>@</code> 為標記的項目均會次序遞增其編號，直到最後一個。舉例如下：</p>
<pre><code>(@)  My first example will be numbered (1).
(@)  My second example will be numbered (2).

Explanation of examples.

(@)  My third example will be numbered (3).
</code></pre><p>編號範例可以加上標籤，並且在文件的其他地方作參照：</p>
<pre><code>(@good)  This is a good example.

As (@good) illustrates, ...
</code></pre><p>標籤可以是由任何英文字母、底線或是連字符號所組成的字串。</p>
<h3 id="緊湊與寬鬆清單"><a href="#緊湊與寬鬆清單" class="headerlink" title="緊湊與寬鬆清單"></a>緊湊與寬鬆清單</h3><p>在與清單相關的「邊界處理」上，Pandoc 與 <code>Markdown.pl</code> 有著不同的處理結果。考慮如下代碼：</p>
<pre><code>+   First
+   Second:
    -   Fee
    -   Fie
    -   Foe

+   Third
</code></pre><p>Pandoc 會將以上清單轉換為「緊湊清單」（在 “First”, “Second” 或 “Third” 之中沒有 <code>&lt;p&gt;</code> 標籤），而 markdown 則會在 “Second” 與 “Third” （但不包含 “First”）裡面置入 <code>&lt;p&gt;</code> 標籤，這是因為 “Third” 之前的空白行而造成的結果。Pandoc 依循著一個簡單規則：如果文字後面跟著空白行，那麼就會被視為段落。既然 “Second” 後面是跟著一個清單，而非空白行，那麼就不會被視為段落了。至於子清單的後面是不是跟著空白行，那就無關緊要了。（注意：即使是設定為 <code>markdown_strict</code> 格式，Pandoc 仍是依以上方式處理清單項目是否為段落的判定。這個處理方式與 markdown 官方語法規範裡的描述一致，然而卻與 <code>Markdown.pl</code> 的處理不同。）</p>
<h3 id="結束一個清單"><a href="#結束一個清單" class="headerlink" title="結束一個清單"></a>結束一個清單</h3><p>如果你在清單之後放入一個縮排的代碼區塊，會有什麼結果？</p>
<pre><code>-   item one
-   item two

    { my code block }
</code></pre><p>問題大了！這邊 pandoc（其他的 markdown 實作也是如此）會將 <code>{ my code block }</code> 視為 <code>item two</code> 這個清單項目的第二個段落來處理，而不會將其視為一個代碼區塊。</p>
<p>要在 <code>item two</code> 之後「切斷」清單，你可以插入一些沒有縮排、輸出時也不可見的內容，例如 HTML 的註解：</p>
<pre><code>-   item one
-   item two

&lt;!-- end of list --&gt;

    { my code block }
</code></pre><p>當你想要兩個各自獨立的清單，而非一個大且連續的清單時，也可以運用同樣的技巧：</p>
<pre><code>1.  one
2.  two
3.  three

&lt;!-- --&gt;

1.  uno
2.  dos
3.  tres
</code></pre><h2 id="分隔線"><a href="#分隔線" class="headerlink" title="分隔線"></a>分隔線</h2><p>一行中若包含三個以上的 <code>*</code>, <code>-</code> 或 <code>_</code> 符號（中間可以以空白字元分隔），則會產生一條分隔線：</p>
<pre><code>*  *  *  *

---------------
</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>有四種表格的形式可以使用。前三種適用於等寬字型的編輯環境，例如 Courier。第四種則不需要直行的對齊，因此可以在比例字型的環境下使用。</p>
<h3 id="簡單表格"><a href="#簡單表格" class="headerlink" title="簡單表格"></a>簡單表格</h3><p><strong>Extension: <code>simple_tables</code>, <code>table_captions</code></strong></p>
<p>簡單表格看起來像這樣子：</p>
<pre><code>  Right     Left     Center     Default
-------     ------ ----------   -------
     12     12        12            12
    123     123       123          123
      1     1          1             1

Table:  Demonstration of simple table syntax.
</code></pre><p>表頭與資料列分別以一行為單位。直行的對齊則依照表頭的文字和其底下虛線的相對位置來決定：[^4]</p>
<ul>
<li>如果虛線與表頭文字的右側有切齊，而左側比表頭文字還長，則該直行為靠右對齊。<ul>
<li>如果虛線與表頭文字的左側有切齊，而右側比表頭文字還長，則該直行為靠左對齊。</li>
<li>如果虛線的兩側都比表頭文字長，則該直行為置中對齊。</li>
<li>如果虛線與表頭文字的兩側都有切齊，則會套用預設的對齊方式（在大多數情況下，這將會是靠左對齊）。</li>
</ul>
</li>
</ul>
<p>[^4]: 這個方案是由 Michel Fortin 在 <a href="http://six.pairlist.net/pipermail/markdown-discuss/2005-March/001097.html" target="_blank" rel="external">Markdown discussion list</a> 的討論中所提出。</p>
<p>表格底下必須接著一個空白行，或是一行虛線後再一個空白行。表格標題為可選的（上面的範例中有出現）。標題需是一個以 <code>Table:</code> （或單純只有 <code>:</code>）開頭作為前綴的段落，輸出時前綴的這部份會被去除掉。表格標題可以放在表格之前或之後。</p>
<p>表頭也可以省略，在省略表頭的情況下，表格下方必須加上一行虛線以清楚標明表格的範圍。例如：</p>
<pre><code>-------     ------ ----------   -------
     12     12        12             12
    123     123       123           123
      1     1          1              1
-------     ------ ----------   -------
</code></pre><p>當省略表頭時，直行的對齊會以表格內容的第一行資料列決定。所以，以上面的表格為例，各直行的對齊依序會是靠右、靠左、置中以及靠右對齊。</p>
<h3 id="多行表格"><a href="#多行表格" class="headerlink" title="多行表格"></a>多行表格</h3><p><strong>Extension: <code>multiline_tables</code>, <code>table_captions</code></strong></p>
<p>多行表格允許表頭與表格資料格的文字能以複數行呈現（但不支援橫跨多欄或縱跨多列的資料格）。以下為範例：</p>
<pre><code>-------------------------------------------------------------
 Centered   Default           Right Left
  Header    Aligned         Aligned Aligned
----------- ------- --------------- -------------------------
   First    row                12.0 Example of a row that
                                    spans multiple lines.

  Second    row                 5.0 Here&apos;s another one. Note
                                    the blank line between
                                    rows.
-------------------------------------------------------------

Table: Here&apos;s the caption. It, too, may span
multiple lines.
</code></pre><p>看起來很像簡單表格，但兩者間有以下差別：</p>
<ul>
<li>在表頭文字之前，必須以一列虛線作為開頭（除非有省略表頭）。<ul>
<li>必須以一列虛線作為表格結尾，之後接一個空白行。</li>
<li>資料列與資料列之間以空白行隔開。</li>
</ul>
</li>
</ul>
<p>在多行表格中，表格分析器會計算各直行的欄寬，並在輸出時盡可能維持各直行在原始文件中的相對比例。因此，要是你覺得某些欄位在輸出時不夠寬，你可以在 markdown 的原始檔中加寬一點。</p>
<p>和簡單表格一樣，表頭在多行表格中也是可以省略的：</p>
<pre><code>----------- ------- --------------- -------------------------
   First    row                12.0 Example of a row that
                                    spans multiple lines.

  Second    row                 5.0 Here&apos;s another one. Note
                                    the blank line between
                                    rows.
----------- ------- --------------- -------------------------

: Here&apos;s a multiline table without headers.
</code></pre><p>多行表格中可以單只包含一個資料列，但該資料列之後必須接著一個空白行（然後才是標示表格結尾的一行虛線）。如果沒有此空白行，此表格將會被解讀成簡單表格。</p>
<h3 id="格框表格"><a href="#格框表格" class="headerlink" title="格框表格"></a>格框表格</h3><p><strong>Extension: <code>grid_tables</code>, <code>table_captions</code></strong></p>
<p>格框表格看起來像這樣：</p>
<pre><code>: Sample grid table.

+---------------+---------------+--------------------+
| Fruit         | Price         | Advantages         |
+===============+===============+====================+
| Bananas       | $1.34         | - built-in wrapper |
|               |               | - bright color     |
+---------------+---------------+--------------------+
| Oranges       | $2.10         | - cures scurvy     |
|               |               | - tasty            |
+---------------+---------------+--------------------+
</code></pre><p>以 <code>=</code> 串成的一行區分了表頭與表格本體，這在沒有表頭的表格中也是可以省略的。在格框表格中的資料格可以包含任意的區塊元素（複數段落、代碼區塊、清單等等）。不支援對齊，也不支援橫跨多欄或縱跨多列的資料格。格框表格可以在 <a href="http://table.sourceforge.net/" target="_blank" rel="external">Emacs table mode</a> 下輕鬆建立。</p>
<h3 id="管線表格"><a href="#管線表格" class="headerlink" title="管線表格"></a>管線表格</h3><p><strong>Extension: <code>pipe_tables</code>, <code>table_captions</code></strong></p>
<p>管線表格看起來像這樣：</p>
<pre><code>| Right | Left | Default | Center |
|------:|:-----|---------|:------:|
|   12  |  12  |    12   |    12  |
|  123  |  123 |   123   |   123  |
|    1  |    1 |     1   |     1  |

  : Demonstration of simple table syntax.
</code></pre><p>這個語法與 [PHP markdown extra 中的表格語法][the same as in PHP markdown extra] 相同。開始與結尾的管線字元是可選的，但各直行間則必須以管線區隔。上面範例中的冒號表明了對齊方式。表頭可以省略，但表頭下的水平虛線必須保留，因為虛線上定義了資料欄的對齊方式。</p>
<p>因為管線界定了各欄之間的邊界，表格的原始碼並不需要像上面例子中各欄之間保持直行對齊。所以，底下一樣是個完全合法（雖然醜陋）的管線表格：</p>
<pre><code>fruit| price
-----|-----:
apple|2.05
pear|1.37
orange|3.09
</code></pre><p>管線表格的資料格不能包含如段落、清單之類的區塊元素，也不能包含複數行文字。</p>
<p>  [the same as in PHP markdown extra]:<br>    <a href="http://michelf.ca/projects/php-markdown/extra/#table" target="_blank" rel="external">http://michelf.ca/projects/php-markdown/extra/#table</a></p>
<p>注意：Pandoc 也可以看得懂以下形式的管線表格，這是由 Emacs 的 orgtbl-mod 所繪製：</p>
<pre><code>| One | Two   |
|-----+-------|
| my  | table |
| is  | nice  |
</code></pre><p>主要的差別在於以 <code>+</code> 取代了部分的 <code>|</code>。其他的 orgtbl 功能並未支援。如果要指定非預設的直行對齊形式，你仍然需要在上面的表格中自行加入冒號。</p>
<h2 id="文件標題區塊"><a href="#文件標題區塊" class="headerlink" title="文件標題區塊"></a>文件標題區塊</h2><p>（譯註：本節中提到的「標題」均指 Title，而非 Headers）</p>
<p><strong>Extension: <code>pandoc_title_block</code></strong></p>
<p>如果檔案以文件標題（Title）區塊開頭</p>
<pre><code>% title
% author(s) (separated by semicolons)
% date
</code></pre><p>這部份將不會作為一般文字處理，而會以書目資訊的方式解析。（這可用在像是單一 LaTeX 或是 HTML 輸出文件的書名上。）這個區塊僅能包含標題，或是標題與作者，或是標題、作者與日期。如果你只想包含作者卻不想包含標題，或是只有標題與日期而沒有作者，你得利用空白行：</p>
<pre><code>%
% Author

% My title
%
% June 15, 2006
</code></pre><p>標題可以包含多行文字，但接續行必須以空白字元開頭，像是：</p>
<pre><code>% My title
  on multiple lines
</code></pre><p>如果文件有多個作者，作者也可以分列在不同行並以空白字元作開頭，或是以分號間隔，或是兩者並行。所以，下列各種寫法得到的結果都是相同的：</p>
<pre><code>% Author One
  Author Two

% Author One; Author Two

% Author One;
  Author Two
</code></pre><p>日期就只能寫在一行之內。</p>
<p>所有這三個 metadata 欄位都可以包含標準的行內格式（斜體、連結、腳註等等）。</p>
<p>文件標題區塊一定會被分析處理，但只有在 <code>--standaline</code> (<code>-s</code>) 選項被設定時才會影響輸出內容。在輸出 HTML 時，文件標題會出現的地方有兩個：一個是在文件的 <code>&lt;head&gt;</code> 區塊裡－－這會顯示在瀏覽器的視窗標題上－－另外一個是文件的 <code>&lt;body&gt;</code> 區塊最前面。位於 <code>&lt;head&gt;</code> 裡的文件標題可以選擇性地加上前綴文字（透過 <code>--title-prefix</code> 或 <code>-T</code> 選項）。而在 <code>&lt;body&gt;</code> 裡的文件標題會以 H1 元素呈現，並附帶 “title” 類別 (class)，這樣就能藉由 CSS 來隱藏顯示或重新定義格式。如果以 <code>-T</code> 選項指定了標題前綴文字，卻沒有設定文件標題區塊裡的標題，那麼前綴文字本身就會被當作是 HTML 的文件標題。</p>
<p>而 man page 的輸出器會分析文件標題區塊的標題行，以解出標題、man page section number，以及其他頁眉 (header) 頁腳 (footer) 所需要的資訊。一般會假設標題行的第一個單字為標題，標題後也許會緊接著一個以括號包住的單一數字，代表 section number（標題與括號之間沒有空白）。在此之後的其他文字則為頁腳與頁眉文字。頁腳與頁眉文字之間是以單獨的一個管線符號 (<code>|</code>) 作為區隔。所以，</p>
<pre><code>% PANDOC(1)
</code></pre><p>將會產生一份標題為 <code>PANDOC</code> 且 section 為 1 的 man page。</p>
<pre><code>% PANDOC(1) Pandoc User Manuals
</code></pre><p>產生的 man page 會再加上 “Pandoc User Manuals” 在頁腳處。</p>
<pre><code>% PANDOC(1) Pandoc User Manuals | Version 4.0
</code></pre><p>產生的 man page 會再加上 “Version 4.0” 在頁眉處。</p>
<h2 id="反斜線跳脫字元"><a href="#反斜線跳脫字元" class="headerlink" title="反斜線跳脫字元"></a>反斜線跳脫字元</h2><p><strong>Extension: <code>all_symbols_escapable</code></strong></p>
<p>除了在代碼區塊或行內代碼之外，任何標點符號或空白字元前面只要加上一個反斜線，都能使其保留字面原義，而不會進行格式的轉義解讀。因此，舉例來說，下面的寫法</p>
<pre><code>*\*hello\**
</code></pre><p>輸出後會得到</p>
<pre><code>&lt;em&gt;*hello*&lt;/em&gt;
</code></pre><p>而不是</p>
<pre><code>&lt;strong&gt;hello&lt;/strong&gt;
</code></pre><p>這條規則比原始的 markdown 規則來得好記許多，原始規則中，只有以下字元才有支援反斜線跳脫，不作進一步轉義：</p>
<pre><code>\`*_{}[]()&gt;#+-.!
</code></pre><p>（然而，如果使用了 <code>markdown_strict</code> 格式，那麼就會採用原始的 markdown 規則）</p>
<p>一個反斜線之後的空白字元會被解釋為不斷行的空白 (nonbreaking space)。這在 TeX 的輸出中會顯示為 <code>~</code>，而在 HTML 與 XML 則是顯示為 <code>\&amp;#160;</code> 或 <code>\&amp;nbsp;</code>。</p>
<p>一個反斜線之後的換行字元（例如反斜線符號出現在一行的最尾端）則會被解釋為強制換行。這在 TeX 的輸出中會顯示為 <code>\\</code>，而在 HTML 裡則是 <code>&lt;br /&gt;</code>。相對於原始 markdown 是以在行尾加上兩個空白字元這種「看不見」的方式進行強制換行，反斜線接換行字元會是比較好的替代方案。</p>
<p>反斜線跳脫字元在代碼上下文中不起任何作用。</p>
<h2 id="智慧型標點符號"><a href="#智慧型標點符號" class="headerlink" title="智慧型標點符號"></a>智慧型標點符號</h2><p><strong>Extension</strong></p>
<p>如果指定了 <code>--smart</code> 選項，pandoc 將會輸出正式印刷用的標點符號，像是將 straight quotes 轉換為 curly quotes[^T1]、<code>---</code> 轉為破折號 (em-dashes)，<code>--</code> 轉為連接號 (en-dashes)，以及將 <code>...</code> 轉為刪節號。不斷行空格 (Nonbreaking spaces) 將會插入某些縮寫詞之後，例如 “Mr.”。</p>
<p>注意：如果你的 LaTeX template 使用了 <code>csquotes</code> 套件，pandoc 會自動偵測並且使用 <code>\enquote{...}</code> 在引言文字上。</p>
<p>[^T1]: 譯註：straight quotes 指的是左右兩側都長得一樣的引號，例如我們直接在鍵盤上打出來的單引號或雙引號；curly quotes 則是左右兩側不同，有從兩側向內包夾視覺效果的引號。</p>
<h2 id="行內格式"><a href="#行內格式" class="headerlink" title="行內格式"></a>行內格式</h2><h3 id="強調"><a href="#強調" class="headerlink" title="強調"></a>強調</h3><p>要 <em>強調</em> 某些文字，只要以 <code>*</code> 或 <code>_</code> 符號前後包住即可，像這樣：</p>
<pre><code>This text is _emphasized with underscores_, and this
is *emphasized with asterisks*.
</code></pre><p>重複兩個 <code>*</code> 或 <code>_</code> 符號以產生 <strong>更強烈的強調</strong>：</p>
<pre><code>This is **strong emphasis** and __with underscores__.
</code></pre><p>一個前後以空白字元包住，或是前面加上反斜線的 <code>*</code> 或 <code>_</code> 符號，都不會轉換為強調格式：</p>
<pre><code>This is * not emphasized *, and \*neither is this\*.
</code></pre><p><strong>Extension: <code>intraword_underscores</code></strong></p>
<p>因為 <code>_</code> 字元有時會使用在單字或是 ID 之中，所以 pandoc 不會把被字母包住的 <code>_</code> 解讀為強調標記。如果有需要特別強調單字中的一部分，就用 <code>*</code>：</p>
<pre><code>feas*ible*, not feas*able*.
</code></pre><h3 id="刪除線"><a href="#刪除線" class="headerlink" title="刪除線"></a>刪除線</h3><p><strong>Extension:  <code>strikeout</code></strong></p>
<p>要將一段文字加上水平線作為刪除效果，將該段文字前後以 <code>~~</code> 包住即可。例如，</p>
<pre><code>This ~~is deleted text.~~
</code></pre><h3 id="上標與下標"><a href="#上標與下標" class="headerlink" title="上標與下標"></a>上標與下標</h3><p><strong>Extension: <code>superscript</code>, <code>subscript</code></strong></p>
<p>要輸入上標可以用 <code>^</code> 字元將要上標的文字包起來；要輸入下標可以用 <code>~</code> 字元將要下標的文字包起來。直接看範例，</p>
<pre><code>H~2~O is a liquid.  2^10^ is 1024.
</code></pre><p>如果要上標或下標的文字中包含了空白，那麼這個空白字元之前必須加上反斜線。（這是為了避免一般使用下的 <code>~</code> 和 <code>^</code> 在非預期的情況下產生出意外的上標或下標。）所以，如果你想要讓字母 P 後面跟著下標文字 ‘a cat’，那麼就要輸入 <code>P~a\ cat~</code>，而不是 <code>P~a cat~</code>。</p>
<h3 id="字面文字"><a href="#字面文字" class="headerlink" title="字面文字"></a>字面文字</h3><p>要讓一小段文字直接以其字面形式呈現，可以用反引號將其包住：</p>
<pre><code>What is the difference between `&gt;&gt;=` and `&gt;&gt;`?
</code></pre><p>如果字面文字中也包含了反引號，那就使用雙重反引號包住：</p>
<pre><code>Here is a literal backtick `` ` ``.
</code></pre><p>（在起始反引號後的空白以及結束反引號前的空白都會被忽略。）</p>
<p>一般性的規則如下，字面文字區段是以連續的反引號字元作為開始（反引號後的空白字元為可選），一直到同樣數目的反引號字元出現才結束（反引號前的空白字元也為可選）。</p>
<p>要注意的是，反斜線跳脫字元（以及其他 markdown 結構）在字面文字的上下文中是沒有效果的：</p>
<pre><code>This is a backslash followed by an asterisk: `\*`.
</code></pre><p><strong>Extension: <code>inline_code_attributes</code></strong></p>
<p>與[圍欄代碼區塊]一樣，字面文字也可以附加屬性：</p>
<pre><code>`&lt;$&gt;`{.haskell}
</code></pre><h2 id="數學"><a href="#數學" class="headerlink" title="數學"></a>數學</h2><p><strong>Extension: <code>tex_math_dollars</code></strong></p>
<p>所有介於兩個 <code>$</code> 字元之間的內容將會被視為 TeX 數學公式處理。開頭的 <code>$</code> 右側必須立刻接上任意文字，而結尾 <code>$</code> 的左側同樣也必須緊挨著文字。這樣一來，<code>$20,000 and $30,000</code> 就不會被當作數學公式處理了。如果基於某些原因，有必須使用 <code>$</code> 符號將其他文字括住的需求時，那麼可以在 <code>$</code> 前使用反斜線跳脫字元，這樣 <code>$</code> 就不會被當作數學公式的分隔符。</p>
<p>TeX 數學公式會在所有輸出格式中印出。至於會以什麼方式演算編排 (render) 則取決於輸出的格式：</p>
<p>Markdown, LaTeX, Org-Mode, ConTeXt<br>  ~ 公式會以字面文字呈現在兩個 <code>$</code> 符號之間。</p>
<p>reStructuredText<br>  ~ 公式會使用 <a href="http://www.american.edu/econ/itex2mml/mathhack.rst" target="_blank" rel="external">此處</a> 所描述的 <code>:math:</code> 這個 “interpreted text role” 來進行演算編排。</p>
<p>AsciiDoc<br>  ~ 公式會以 <code>latexmath:[...]</code> 演算編排。</p>
<p>Texinfo<br>  ~ 公式會在 <code>@math</code> 指令中演算編排。</p>
<p>groff man<br>  ~ 公式會以去掉 <code>$</code> 後的字面文字演算編排。</p>
<p>MediaWiki<br>  ~ 公式會在 <code>&lt;math&gt;</code> 標籤中演算編排。</p>
<p>Textile<br>  ~ 公式會在 <code>&lt;span class=&quot;math&quot;&gt;</code> 標籤中演算編排。</p>
<p>RTF, OpenDocument, ODT<br>  ~ 如果可以的話，公式會以 unicode 字元演算編排，不然就直接使用字面字元。</p>
<p>Docbook<br>  ~ 如果使用了 <code>--mathml</code> 旗標，公式就會在 <code>inlineequation</code> 或 <code>informalequation</code> 標籤中使用 mathml 演算編排。否則就會盡可能使用 unicode 字元演算編排。</p>
<p>Docx<br>  ~ 公式會以 OMML 數學標記的方式演算編排。</p>
<p>FictionBook2<br>  ~ 如果有使用 <code>--webtex</code> 選項，公式會以 Google Charts 或其他相容的網路服務演算編排為圖片，並下載嵌入於電子書中。否則就會以字面文字顯示。</p>
<p>HTML, Slidy, DZSlides, S5, EPUB<br>  ~ 公式會依照以下命令列選項的設置，以不同的方法演算編排為 HTML 代碼。</p>
<pre><code>1.  預設方式是將 TeX 數學公式盡可能地以 unicode 字元演算編排，如同 RTF、DocBook 以及 OpenDocument 的輸出。公式會被放在附有屬性 `class=&quot;math&quot;` 的 `span` 標籤內，所以可以在需要時給予不同的樣式，使其突出於周遭的文字內容。

2.  如果使用了 `--latexmathml` 選項，TeX 數學公式會被顯示於 `$` 或 `$$` 字元中，並放在附帶 `LaTeX` 類別的 `&lt;span&gt;` 標籤裡。這段內容會用 [LaTeXMathML] script 演算編排為數學公式。（這個方法無法適用於所有瀏覽器，但在 Firefox 中是有效的。在不支援 LaTeXMathML 的瀏覽器中，TeX 數學公式會單純的以兩個 `$` 字元間的字面文字呈現。）

3.  如果使用了 `--jsmath` 選項，TeX數學公式會放在 `&lt;span&gt;` 標籤（用於行內數學公式）或 `&lt;div&gt;` 標籤（用於區塊數學公式）中，並附帶類別屬性 `math`。這段內容會使用 [jsMath] script 來演算編排。

4.  如果使用了 `--mimetex` 選項，[mimeTeX] CGI script 會被呼叫來產生每個 TeX 數學公式的圖片。這適用於所有瀏覽器。`--mimetex` 選項有一個可選的 URL 參數。如果沒有指定 URL，它會假設 mimeTeX CGI script 的位置在 `/cgi-bin/mimetex.cig`。

5.  如果使用了 `--gladtex` 選項，TeX 數學公式在 HTML 的輸出中會被 `&lt;eq&gt;` 標籤包住。產生的 `htex` 檔案之後可以透過 [gladTeX] 處理，這會針對每個數學公式生成圖片，並於最後生成一個包含這些圖片連結的 `html` 檔案。所以，整個處理流程如下：

        pandoc -s --gladtex myfile.txt -o myfile.htex
        gladtex -d myfile-images myfile.htex
        # produces myfile.html and images in myfile-images

6.  如果使用了 `--webtex` 選項，TeX 數學公式會被轉換為 `&lt;img&gt;` 標籤並連結到一個用以轉換公式為圖片的外部 script。公式將會編碼為 URL 可接受格式並且與指定的 URL 參數串接。如果沒有指定 URL，那麼將會使用 Google Chart API (`http://chart.apis.google.com/chart?cht=tx&amp;chl=`)。

7.  如果使用了 `--mathjax` 選項，TeX 數學公式將會被包在 `\(...\)`（用於行內數學公式）或 `\[...\]`（用於區塊數學公式）之間顯示，並且放在附帶類別 `math` 的 `&lt;span&gt;` 標籤之中。這段內容會使用 [MathJax] script 演算編排為頁面上的數學公式。
</code></pre><h2 id="Raw-HTML"><a href="#Raw-HTML" class="headerlink" title="Raw HTML"></a>Raw HTML</h2><p><strong>Extension: <code>raw_html</code></strong></p>
<p>Markdown 允許你在文件中的任何地方插入原始 HTML（或 DocBook）指令（除了在字面文字上下文處，此時的 <code>&lt;</code>, <code>&gt;</code> 和 <code>&amp;</code> 都會按其字面意義顯示）。（技術上而言這不算擴充功能，因為原始 markdown 本身就有提供此功能，但做成擴充形式便可以在有特殊需要的時候關閉此功能。）</p>
<p>輸出 HTML, S5, Slidy, Slideous, DZSlides, EPUB, Markdown 以及 Textile 等格式時，原始 HTML 代碼會不作修改地保留至輸出檔案中；而其他格式的輸出內容則會將原始 HTML 代碼去除掉。</p>
<p><strong>Extension: <code>markdown_in_html_blocks</code></strong></p>
<p>原始 markdown 允許你插入 HTML「區塊」：所謂的 HTML 區塊是指，上下各由一個空白行所隔開，開始與結尾均由所在行最左側開始的一連串對稱均衡的 HTML 標籤。在這個區塊中，任何內容都會當作是 HTML 來分析，而不再視為 markdown；所以（舉例來說），<code>*</code> 符號就不再代表強調。</p>
<p>當指定格式為 <code>markdown_strict</code> 時，Pandoc 會以上述方式處理；但預設情況下，Pandoc 能夠以 markdown 語法解讀 HTML 區塊標籤中的內容。舉例說明，Pandoc 能夠將底下這段</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;*one*&lt;/td&gt;
        &lt;td&gt;[a link](http://google.com)&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre><p>轉換為</p>
<pre><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;em&gt;one&lt;/em&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;http://google.com&quot;&gt;a link&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre><p>而 <code>Markdown.pl</code> 則是保留該段原樣。</p>
<p>這個規則只有一個例外：那就是介於 <code>&lt;script&gt;</code> 與 <code>&lt;style&gt;</code> 之間的文字都不會被拿來當作 markdown 解讀。</p>
<p>這邊與原始 markdown 的分歧，主要是為了讓 markdown 能夠更便利地混入 HTML 區塊元素。比方說，一段 markdown 文字可以用 <code>&lt;div&gt;</code> 標籤將其前後包住來進行樣式指定，而不用擔心裡面的 markdown 不會被解譯到。</p>
<h2 id="Raw-TeX"><a href="#Raw-TeX" class="headerlink" title="Raw TeX"></a>Raw TeX</h2><p><strong>Extension: <code>raw_tex</code></strong></p>
<p>除了 HTML 之外，pandoc 也接受文件中嵌入原始 LaTeX, TeX 以及 ConTeXt 代碼。行內 TeX 指令會被保留並不作修改地輸出至 LaTeX 與 ConTeXt 格式中。所以，舉例來說，你可以使用 LaTeX 來導入 BibTeX 的引用文獻：</p>
<pre><code>This result was proved in \cite{jones.1967}.
</code></pre><p>請注意在 LaTeX 環境下時，像是底下</p>
<pre><code>\begin{tabular}{|l|l|}\hline
Age &amp; Frequency \\ \hline
18--25  &amp; 15 \\
26--35  &amp; 33 \\
36--45  &amp; 22 \\ \hline
\end{tabular}
</code></pre><p>位在 <code>begin</code> 與 <code>end</code> 標籤之間的內容，都會被當作是原始 LaTeX 資料解讀，而不會視為 markdown。</p>
<p>行內 LaTeX 在輸出至 Markdown, LaTeX 及 ConTeXt 之外的格式時會被忽略掉。</p>
<h2 id="LaTeX-巨集"><a href="#LaTeX-巨集" class="headerlink" title="LaTeX 巨集"></a>LaTeX 巨集</h2><p><strong>Extension: <code>latex_macros</code></strong></p>
<p>當輸出格式不是 LaTeX 時，pandoc 會分析 LaTeX 的 <code>\newcommand</code> 和 <code>\renewcommand</code> 定義，並套用其產生的巨集到所有 LaTeX 數學公式中。所以，舉例來說，下列指令對於所有的輸出格式均有作用，而非僅僅作用於 LaTeX 格式： </p>
<pre><code>\newcommand{\tuple}[1]{\langle #1 \rangle}

$\tuple{a, b, c}$
</code></pre><p>在 LaTeX 的輸出中，<code>\newcommand</code> 定義會單純不作修改地保留至輸出結果。</p>
<h2 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h2><p>Markdown 接受以下數種指定連結的方式。</p>
<h3 id="自動連結"><a href="#自動連結" class="headerlink" title="自動連結"></a>自動連結</h3><p>如果你用角括號將一段 URL 或是 email 位址包起來，它會自動轉換成連結：</p>
<pre><code>&lt;http://google.com&gt;
&lt;sam@green.eggs.ham&gt;
</code></pre><h3 id="行內連結"><a href="#行內連結" class="headerlink" title="行內連結"></a>行內連結</h3><p>一個行內連結包含了位在方括號中的連結文字，以及方括號後以圓括號包起來的 URL。（你可以選擇性地在 URL 後面加入連結標題，標題文字要放在引號之中。）</p>
<pre><code>This is an [inline link](/url), and here&apos;s [one with
a title](http://fsf.org &quot;click here for a good time!&quot;).
</code></pre><p>方括號與圓括號之間不能有空白。連結文字可以包含格式（例如強調），但連結標題則否。</p>
<h3 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h3><p>一個 <strong>明確</strong> 的參考連結包含兩個部分，連結本身以及連結定義，其中連結定義可以放在文件的任何地方（不論是放在連結所在處之前或之後）。</p>
<p>連結本身是由兩組方括號所組成，第一組方括號中為連結文字，第二組為連結標籤。（在兩個方括號間可以有空白。）連結定義則是以方括號框住的連結標籤作開頭，後面跟著一個冒號一個空白，再接著一個 URL，最後可以選擇性地（在一個空白之後）加入由引號或是圓括號包住的連結標題。</p>
<p>以下是一些範例：</p>
<pre><code>[my label 1]: /foo/bar.html  &quot;My title, optional&quot;
[my label 2]: /foo
[my label 3]: http://fsf.org (The free software foundation)
[my label 4]: /bar#special  &apos;A title in single quotes&apos;
</code></pre><p>連結的 URL 也可以選擇性地以角括號包住：</p>
<pre><code>[my label 5]: &lt;http://foo.bar.baz&gt;
</code></pre><p>連結標題可以放在第二行：</p>
<pre><code>[my label 3]: http://fsf.org
  &quot;The free software foundation&quot;
</code></pre><p>需注意連結標籤並不區分大小寫。所以下面的例子會建立合法的連結：</p>
<pre><code>Here is [my link][FOO]

[Foo]: /bar/baz
</code></pre><p>在一個 <strong>隱性</strong> 參考連結中，第二組方括號的內容是空的，甚至可以完全地略去：</p>
<pre><code>See [my website][], or [my website].

[my website]: http://foo.bar.baz
</code></pre><p>注意：在 <code>Markdown.pl</code> 以及大多數其他 markdown 實作中，參考連結的定義不能存在於嵌套結構中，例如清單項目或是區塊引言。Pandoc lifts this arbitrary seeming restriction。所以雖然下面的語法在幾乎所有其他實作中都是錯誤的，但在 pandoc 中可以正確處理：</p>
<pre><code>&gt; My block [quote].
&gt;
&gt; [quote]: /foo
</code></pre><h3 id="內部連結"><a href="#內部連結" class="headerlink" title="內部連結"></a>內部連結</h3><p>要連結到同一份文件的其他章節，可使用自動產生的 ID（參見 [HTML, LaTeX 與 ConTeXt 的標題識別符] 一節後半）。例如：</p>
<pre><code>See the [Introduction](#introduction).
</code></pre><p>或是</p>
<pre><code>See the [Introduction].

[Introduction]: #introduction
</code></pre><p>內部連結目前支援的格式有 HTML（包括 HTML slide shows 與 EPUB）、LaTeX 以及 ConTeXt。</p>
<h2 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h2><p>在連結語法的前面加上一個 <code>!</code> 就是圖片的語法了。連結文字將會作為圖片的替代文字（alt text）：</p>
<pre><code>![la lune](lalune.jpg &quot;Voyage to the moon&quot;)

![movie reel]

[movie reel]: movie.gif
</code></pre><h3 id="附上說明的圖片"><a href="#附上說明的圖片" class="headerlink" title="附上說明的圖片"></a>附上說明的圖片</h3><p><strong>Extension: <code>implicit_figures</code></strong></p>
<p>一個圖片若自身單獨存在一個段落中，那麼將會以附上圖片說明 (caption) 的圖表 (figure) 形式呈現。[^5]（在 LaTeX 中，會使用圖表環境；在 HTML 中，圖片會被放在具有 <code>figure</code> 類別的 <code>div</code> 元素中，並會附上一個具有 <code>caption</code> 類別的 <code>p</code> 元素。）圖片的替代文字同時也會用來作為圖片說明。</p>
<pre><code>![This is the caption](/url/of/image.png)
</code></pre><p>[^5]: 這項功能尚未在 RTF, OpenDocument 或 ODT 格式上實現。在這些格式中，你會得到一個在段落中只包含自己的圖片，而無圖片說明。</p>
<p>如果你只是想要個一般的行內圖片，那麼只要讓圖片不是段落裡唯一的元素即可。一個簡單的方法是在圖片後面插入一個不斷行空格：</p>
<pre><code>![This image won&apos;t be a figure](/url/of/image.png)\
</code></pre><h2 id="腳註"><a href="#腳註" class="headerlink" title="腳註"></a>腳註</h2><p><strong>Extension: <code>footnotes</code></strong></p>
<p>Pandoc’s markdown 支援腳註功能，使用以下的語法：</p>
<pre><code>Here is a footnote reference,[^1] and another.[^longnote]

[^1]: Here is the footnote.

[^longnote]: Here&apos;s one with multiple blocks.

    Subsequent paragraphs are indented to show that they
belong to the previous footnote.

        { some.code }

    The whole paragraph can be indented, or just the first
    line.  In this way, multi-paragraph footnotes work like
    multi-paragraph list items.

This paragraph won&apos;t be part of the note, because it
isn&apos;t indented.
</code></pre><p>腳註參考用的 ID 不得包含空白、tabs 或換行字元。這些 ID 只會用來建立腳註位置與腳註文字的對應關連；在輸出時，腳註將會依序遞增編號。</p>
<p>腳註本身不需要放在文件的最後面。它們可以放在文件裡的任何地方，但不能被放入區塊元素（清單、區塊引言、表格等）之中。</p>
<p><strong>Extension: <code>inline_notes</code></strong></p>
<p>Pandoc 也支援了行內腳註（儘管，與一般腳註不同，行內腳註不能包含多個段落）。其語法如下：</p>
<pre><code>Here is an inline note.^[Inlines notes are easier to write, since
you don&apos;t have to pick an identifier and move down to type the
note.]
</code></pre><p>行內與一般腳註可以自由交錯使用。</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><strong>Extension: <code>citations</code></strong></p>
<p>Pandoc 能夠以數種形式自動產生引用與參考書目（使用 Andrea Rossato 的 <code>hs-citeproc</code>）。為了使用這項功能，你需要一個下列其中一種格式的參考書目資料庫：</p>
<p>  Format            File extension</p>
<hr>
<p>  MODS              .mods<br>  BibLaTeX          .bib<br>  BibTeX            .bibtex<br>  RIS               .ris<br>  EndNote           .enl<br>  EndNote XML       .xml<br>  ISI               .wos<br>  MEDLINE           .medline<br>  Copac             .copac<br>  JSON citeproc     .json</p>
<p>需注意的是副檔名 <code>.bib</code> 一般而言同時適用於 BibTeX 與 BibLaTeX 的檔案，不過你可以使用 <code>.bibtex</code> 來強制指定 BibTeX。</p>
<p>你需要使用命令列選項 <code>--bibliography</code> 來指定參考書目檔案（如果有多個書目檔就得反覆指定）。</p>
<p>預設情況下，pandoc 會在引用文獻與參考書目中使用芝加哥「作者－日期」格式。要使用其他的格式，你需要用 <code>--csl</code> 選項來指定一個 <a href="http://CitationStyles.org" target="_blank" rel="external">CSL</a> 1.0 格式的檔案。關於建立與修改 CSL 格式的入門可以在 <a href="http://citationstyles.org/downloads/primer.html" target="_blank" rel="external">http://citationstyles.org/downloads/primer.html</a> 這邊找到。<a href="https://github.com/citation-style-language/styles" target="_blank" rel="external">https://github.com/citation-style-language/styles</a> 是 CSL 格式的檔案庫。也可以在 <a href="http://zotero.org/styles" target="_blank" rel="external">http://zotero.org/styles</a> 以簡單的方式瀏覽。</p>
<p>引用資訊放在方括號中，以分號區隔。每一條引用都會有個 key，由 <code>@</code> 加上資料庫中的引用 ID 組成，並且可以選擇性地包含前綴、定位以及後綴。以下是一些範例：</p>
<pre><code>Blah blah [see @doe99, pp. 33-35; also @smith04, ch. 1].

Blah blah [@doe99, pp. 33-35, 38-39 and *passim*].

Blah blah [@smith04; @doe99].
</code></pre><p>在 <code>@</code> 前面的減號 (<code>-</code>) 將會避免作者名字在引用中出現。這可以用在已經提及作者的文章場合中：</p>
<pre><code>Smith says blah [-@smith04].
</code></pre><p>你也可以在文字中直接插入引用資訊，方式如下：</p>
<pre><code>@smith04 says blah.

@smith04 [p. 33] says blah.
</code></pre><p>如果引用格式檔需要產生一份引用作品的清單，這份清單會被放在文件的最後面。一般而言，你需要以一個適當的標題結束你的文件：</p>
<pre><code>last paragraph...

# References
</code></pre><p>如此一來參考書目就會被放在這個標題後面了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這份文件是 &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;Pandoc&lt;/a&gt; 版本 Markdown 語法的中文翻譯。Pandoc 本身是由 &lt;a href=&quot;http://johnmacfarlane.net/&quot;&gt;John MacFarlane&lt;/a&gt; 所開發的文件轉換工具，可以在 HTML, Markdown, PDF, TeX…等等格式之間進行轉換。有許多喜歡純文字編輯的人，利用 Pandoc 來進行論文的撰寫或投影片製作。但除了轉換的功能外，Pandoc 所定義的 Markdown 擴充語法也是這套工具的一大亮點，在 Pandoc 的官方使用說明文件中，光是其針對 Markdown 格式的擴充就佔了整整一半左右的篇幅。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="pandoc" scheme="//litten.me/tags/pandoc/"/>
    
  </entry>
  
  <entry>
    <title>金刚狼3：殊死一战</title>
    <link href="//litten.me/2017/03/20/%E9%87%91%E5%88%9A%E7%8B%BC3%EF%BC%9A%E6%AE%8A%E6%AD%BB%E4%B8%80%E6%88%98/"/>
    <id>//litten.me/2017/03/20/金刚狼3：殊死一战/</id>
    <published>2017-03-20T05:39:22.000Z</published>
    <updated>2017-03-20T06:23:42.807Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://omszjha71.bkt.clouddn.com/Logan.jpg" alt="Logan.jpg"></p>
<hr>
<p>最近看了金刚狼3，所在的场次没什么人，算是包场了。</p>
<p>这部影片颠覆了我对英雄片的印象，原来英雄也会有普通人的痛苦。</p>
<p>挺有感触的，一部不错的影片，值回票价。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://omszjha71.bkt.clouddn.com/Logan.jpg&quot; alt=&quot;Logan.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最近看了金刚狼3，所在的场次没什么人，算是包场了。&lt;/p&gt;
&lt;p&gt;这部影片颠覆了我对英雄片的印象，原来英雄也
    
    </summary>
    
    
      <category term="随笔" scheme="//litten.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>chrome shortcuts</title>
    <link href="//litten.me/2017/03/19/chrome-shortcuts/"/>
    <id>//litten.me/2017/03/19/chrome-shortcuts/</id>
    <published>2017-03-19T05:10:26.000Z</published>
    <updated>2017-03-20T06:27:55.428Z</updated>
    
    <content type="html"><![CDATA[<h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><ol>
<li><a href="#png下载">png下载</a></li>
<li><a href="#使用开发者工具">使用开发者工具</a></li>
<li><a href="#开发者工具下的快捷键">开发者工具下的快捷键</a></li>
<li><a href="#elements">Elements</a></li>
<li><a href="#标签页和窗口快捷键">标签页和窗口快捷键</a></li>
<li><a href="#功能快捷键">功能快捷键</a></li>
<li><a href="#地址栏快捷键">地址栏快捷键</a></li>
<li><a href="#网页快捷键">网页快捷键</a></li>
<li><a href="#鼠标快捷键">鼠标快捷键</a></li>
</ol>
<a id="more"></a>
<h3 id="png下载"><a href="#png下载" class="headerlink" title="png下载"></a>png下载</h3><p>下载地址：<a href="http://omszjha71.bkt.clouddn.com/chrome-shortcuts.png" target="_blank" rel="external">png下载</a></p>
<h3 id="使用开发者工具"><a href="#使用开发者工具" class="headerlink" title="使用开发者工具"></a>使用开发者工具</h3><table>
<thead>
<tr>
<th>操作</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>打开开发者工具（开则关，关则开）</td>
<td>F12 / Ctrl + Shift + I</td>
<td>Cmd + Opt + I</td>
</tr>
<tr>
<td>打开/切换查看页面元素和开发者工具</td>
<td>Ctrl + Shift + C</td>
<td>Cmd + Opt + C</td>
</tr>
<tr>
<td>打开开发者工具，并将焦点定位到<code>console</code>上（开则关，关则开）</td>
<td>Ctrl + Shift + J</td>
<td>Cmd + Opt + J</td>
</tr>
</tbody>
</table>
<h3 id="开发者工具下的快捷键"><a href="#开发者工具下的快捷键" class="headerlink" title="开发者工具下的快捷键"></a>开发者工具下的快捷键</h3><table>
<thead>
<tr>
<th>操作</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>显示常规设置</td>
<td>? / F1</td>
<td>?</td>
</tr>
<tr>
<td>切换到下一个面板</td>
<td>Ctrl + ]</td>
<td>Cmd + ]</td>
</tr>
<tr>
<td>切换到上一个面板</td>
<td>Ctrl + [</td>
<td>Cmd + [</td>
</tr>
<tr>
<td>切换到面板历史的下一个记录</td>
<td>Ctrl + Alt + ]</td>
<td>Cmd + Opt + ]</td>
</tr>
<tr>
<td>切换到面板历史的上一个记录</td>
<td>Ctrl + Alt + [</td>
<td>Cmd + Opt + [</td>
</tr>
<tr>
<td>改变开发者工具的定位位置（右/下）</td>
<td>Ctrl + Shift + D</td>
<td>Cmd + Shift + D</td>
</tr>
<tr>
<td>切换设备模式</td>
<td>Ctrl + Shift + M</td>
<td>Cmd + Shift + M</td>
</tr>
<tr>
<td>显示或者隐藏<code>console</code>抽屉板块/关闭设置</td>
<td>Esc</td>
<td>Esc</td>
</tr>
</tbody>
</table>
<h3 id="Elements"><a href="#Elements" class="headerlink" title="Elements"></a>Elements</h3><table>
<thead>
<tr>
<th>操作</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>撤销修改</td>
<td>Ctrl + Z</td>
<td>Cmd + Z</td>
</tr>
<tr>
<td>恢复修改</td>
<td>Ctrl + Y</td>
<td>Cmd +Y / Cmd + Shift + Z</td>
</tr>
<tr>
<td>展开/折叠节点</td>
<td>→/←</td>
<td>→/←</td>
</tr>
<tr>
<td>展开节点</td>
<td>双击标签</td>
<td>双击标签</td>
</tr>
<tr>
<td>展开/折叠节点以及所有节点</td>
<td>Ctrl + Alt + 标签旁的展开小图标</td>
<td>Opt + 标签旁的展开小图标</td>
</tr>
<tr>
<td>编辑标签属性</td>
<td>Enter/双击属性</td>
<td>Enter/双击属性</td>
</tr>
<tr>
<td>隐藏元素</td>
<td>H</td>
<td>H</td>
</tr>
<tr>
<td>切换编辑HTML状态</td>
<td>F2</td>
<td>未知</td>
</tr>
</tbody>
</table>
<h3 id="标签页和窗口快捷键"><a href="#标签页和窗口快捷键" class="headerlink" title="标签页和窗口快捷键"></a>标签页和窗口快捷键</h3><table>
<thead>
<tr>
<th>操作</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>打开新窗口</td>
<td>Ctrl + n</td>
<td>⌘ + n</td>
</tr>
<tr>
<td>在隐身模式下打开新窗口</td>
<td>Ctrl + Shift + n</td>
<td>⌘ + Shift + n</td>
</tr>
<tr>
<td>打开新的标签页，并跳转到该标签页</td>
<td>Ctrl + t</td>
<td>⌘ + t</td>
</tr>
<tr>
<td>焦点在url时候新标签页打开</td>
<td>Alt + Enter</td>
<td>Cmd + Return(Enter)</td>
</tr>
<tr>
<td>重新打开最后关闭的标签页，并跳转到该标签页</td>
<td>Ctrl + Shift + t</td>
<td>⌘ + Shift + t</td>
</tr>
<tr>
<td>跳转到下一个打开的标签页</td>
<td>Ctrl + Tab 或 Ctrl + PgDn</td>
<td>⌘ + Option + 向右箭头键</td>
</tr>
<tr>
<td>跳转到上一个打开的标签页</td>
<td>Ctrl + Shift + Tab 或 Ctrl + PgUp</td>
<td>⌘ + Option + 向左箭头键</td>
</tr>
<tr>
<td>跳转到特定标签页</td>
<td>Ctrl + 1 到 Ctrl + 8</td>
<td>⌘ + 1 到 ⌘ + 8</td>
</tr>
<tr>
<td>跳转到最后一个标签页</td>
<td>Ctrl + 9</td>
<td>⌘ + 9</td>
</tr>
<tr>
<td>在当前标签页中打开主页</td>
<td>Alt + Home</td>
<td>Option + Home</td>
</tr>
<tr>
<td>打开当前标签页浏览记录中记录的上一个页面</td>
<td>Alt + 向左箭头键</td>
<td>⌘ + [ 或 ⌘ + 向左箭头键</td>
</tr>
<tr>
<td>打开当前标签页浏览记录中记录的下一个页面</td>
<td>Alt + 向右箭头键</td>
<td>⌘ + ] 或 ⌘ + 向右箭头键</td>
</tr>
<tr>
<td>关闭当前标签页</td>
<td>Ctrl + w 或 Ctrl + F4</td>
<td>⌘ + w</td>
</tr>
<tr>
<td>最小化当前窗口</td>
<td>Alt + 空格键 + n</td>
<td>⌘ + m</td>
</tr>
<tr>
<td>关闭当前窗口</td>
<td>Alt + F4</td>
<td>⌘ + Shift + w</td>
</tr>
<tr>
<td>隐藏 Google Chrome</td>
<td>未知</td>
<td>⌘ + h</td>
</tr>
<tr>
<td>退出 Google Chrome</td>
<td>Ctrl + Shift + q</td>
<td>⌘ + q</td>
</tr>
</tbody>
</table>
<h3 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h3><table>
<thead>
<tr>
<th>操作</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>打开“菜单”菜单</td>
<td>Alt + f、Alt + e 或 F10</td>
<td>未知</td>
</tr>
<tr>
<td>显示或隐藏书签栏</td>
<td>Ctrl + Shift + b</td>
<td>⌘ + Shift + b</td>
</tr>
<tr>
<td>打开书签管理器</td>
<td>Ctrl + Shift + o</td>
<td>⌘ + Option + b</td>
</tr>
<tr>
<td>在新标签页中打开“设置”页</td>
<td>未知</td>
<td>⌘ + ,</td>
</tr>
<tr>
<td>在新标签页中打开“历史记录”页</td>
<td>Ctrl + h</td>
<td>⌘ + y</td>
</tr>
<tr>
<td>在新标签页中打开“下载内容”页</td>
<td>Ctrl + j</td>
<td>⌘ + Shift + j</td>
</tr>
<tr>
<td>打开 Chrome 任务管理器</td>
<td>Shift + Esc</td>
<td>未知</td>
</tr>
<tr>
<td>将焦点放置在 Chrome 工具栏中的第一项上</td>
<td>Shift + Alt + t</td>
<td>未知</td>
</tr>
<tr>
<td>在地址栏、书签栏（若显示）和页面内容之间向前切换焦点</td>
<td>F6</td>
<td>未知</td>
</tr>
<tr>
<td>在地址栏、书签栏（若显示）和页面内容之间向后切换焦点</td>
<td>Shift + F6</td>
<td>未知</td>
</tr>
<tr>
<td>打开查找栏搜索当前网页</td>
<td>Ctrl + f 或 F3</td>
<td>⌘ + f</td>
</tr>
<tr>
<td>跳转到与查找栏中搜索字词相匹配的下一条内容</td>
<td>Ctrl + g</td>
<td>⌘ + g</td>
</tr>
<tr>
<td>跳转到与查找栏中搜索字词相匹配的上一条内容</td>
<td>Ctrl + Shift + g</td>
<td>⌘ + Shift + g</td>
</tr>
<tr>
<td>打开“清除浏览数据”选项</td>
<td>Ctrl + Shift + Delete</td>
<td>⌘ + Shift + Delete</td>
</tr>
<tr>
<td>在新标签页中打开 Chrome 帮助中心</td>
<td>F1</td>
<td>未知</td>
</tr>
<tr>
<td>使用其他帐户登录或进入隐身模式</td>
<td>Ctrl + Shift + m</td>
<td>⌘ + Shift + m</td>
</tr>
<tr>
<td>打开反馈表单</td>
<td>Ctrl + Shift + i</td>
<td>未知</td>
</tr>
</tbody>
</table>
<h3 id="地址栏快捷键"><a href="#地址栏快捷键" class="headerlink" title="地址栏快捷键"></a>地址栏快捷键</h3><table>
<thead>
<tr>
<th>操作</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>使用默认搜索引擎进行搜索</td>
<td>输入搜索字词并按 Enter 键</td>
<td>输入搜索字词并按 Enter 键</td>
</tr>
<tr>
<td>使用其他搜索引擎进行搜索</td>
<td>输入搜索引擎名称并按 Tab 键</td>
<td>输入搜索引擎名称并按 Tab 键</td>
</tr>
<tr>
<td>为网站名称添加 www. 和 .com，并在当前标签页中打开该网站</td>
<td>输入网站名称并按 Ctrl + Enter 键</td>
<td>输入网站名称并按 Control + Enter 键</td>
</tr>
<tr>
<td>为网站名称添加 www. 和 .com，并在新标签页中打开该网站</td>
<td>输入网站名称并按 Alt + Enter 键</td>
<td>输入网站名称并按 Control + Shift + Enter 键</td>
</tr>
<tr>
<td>跳转到地址栏</td>
<td>Ctrl + l、Alt + d 或 F6</td>
<td>⌘ + l</td>
</tr>
<tr>
<td>在新的后台标签页中打开网站</td>
<td>未知</td>
<td>输入网址并按 ⌘ + Enter 键</td>
</tr>
<tr>
<td>从页面中的任意位置搜索</td>
<td>Ctrl + k 或 Ctrl + e</td>
<td>未知</td>
</tr>
</tbody>
</table>
<h3 id="网页快捷键"><a href="#网页快捷键" class="headerlink" title="网页快捷键"></a>网页快捷键</h3><table>
<thead>
<tr>
<th>操作</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>打开选项以打印当前网页</td>
<td>Ctrl + p</td>
<td>⌘ + p</td>
</tr>
<tr>
<td>打开选项以保存当前网页</td>
<td>Ctrl + s</td>
<td>⌘ + s</td>
</tr>
<tr>
<td>重新加载当前网页</td>
<td>F5 或 Ctrl + r</td>
<td>⌘ + r</td>
</tr>
<tr>
<td>重新加载当前网页（忽略缓存的内容）</td>
<td>Shift + F5 或 Ctrl + Shift + r</td>
<td>⌘ + Shift + r</td>
</tr>
<tr>
<td>停止加载网页</td>
<td>Esc</td>
<td>Esc</td>
</tr>
<tr>
<td>浏览下一个可点击项</td>
<td>Tab</td>
<td>Tab</td>
</tr>
<tr>
<td>浏览上一个可点击项</td>
<td>Shift + Tab</td>
<td>Shift + Tab</td>
</tr>
<tr>
<td>使用 Chrome 打开计算机中的文件</td>
<td>按住 Ctrl + o 键并选择文件</td>
<td>按住 ⌘ + o 键并选择文件</td>
</tr>
<tr>
<td>显示当前网页的 HTML 源代码（不可修改）</td>
<td>Ctrl + u</td>
<td>⌘ + Option + u</td>
</tr>
<tr>
<td>将当前网页保存为书签</td>
<td>Ctrl + d</td>
<td>⌘ + d</td>
</tr>
<tr>
<td>将所有打开的标签页以书签的形式保存在新文件夹中</td>
<td>Ctrl + Shift + d</td>
<td>⌘ + Shift + d</td>
</tr>
<tr>
<td>开启或关闭全屏模式</td>
<td>F11</td>
<td>⌘ + Ctrl + f</td>
</tr>
<tr>
<td>放大网页上的所有内容</td>
<td>Ctrl 和 +</td>
<td>⌘ 和 +</td>
</tr>
<tr>
<td>缩小网页上的所有内容</td>
<td>Ctrl 和 -</td>
<td>⌘ 和 -</td>
</tr>
<tr>
<td>将网页上的所有内容恢复到默认大小</td>
<td>Ctrl + 0</td>
<td>⌘ + 0</td>
</tr>
<tr>
<td>向下滚动网页，一次一个屏幕</td>
<td>空格键或 PgDn</td>
<td>空格键</td>
</tr>
<tr>
<td>向上滚动网页，一次一个屏幕</td>
<td>Shift + 空格键或 PgUp</td>
<td>Shift + 空格键</td>
</tr>
<tr>
<td>转到网页顶部</td>
<td>首页（Home）</td>
<td>未知</td>
</tr>
<tr>
<td>转到网页底部</td>
<td>末尾（End）</td>
<td>未知</td>
</tr>
<tr>
<td>将光标移到文本字段中的上一个字词前面</td>
<td>Ctrl + 向左箭头键</td>
<td>Option + 向左箭头键</td>
</tr>
<tr>
<td>将光标移到文本字段中的上一个字词后面</td>
<td>Ctrl + 向右箭头键</td>
<td>Option + 向右箭头键</td>
</tr>
<tr>
<td>删除文本字段中的上一个字词</td>
<td>Ctrl + Backspace</td>
<td>Option + Backspace</td>
</tr>
<tr>
<td>将焦点移到通知上</td>
<td>Alt + n</td>
<td>未知</td>
</tr>
<tr>
<td>在通知中允许</td>
<td>Alt + Shift + a</td>
<td>未知</td>
</tr>
<tr>
<td>在通知中拒绝</td>
<td>Alt + Shift + d</td>
<td>未知</td>
</tr>
<tr>
<td>在当前标签页中打开主页</td>
<td>Alt + Home</td>
<td>⌘ + Shift + h</td>
</tr>
</tbody>
</table>
<h3 id="鼠标快捷键"><a href="#鼠标快捷键" class="headerlink" title="鼠标快捷键"></a>鼠标快捷键</h3><table>
<thead>
<tr>
<th>操作</th>
<th>Windows</th>
<th>Mac</th>
</tr>
</thead>
<tbody>
<tr>
<td>在当前标签页中打开链接（仅限鼠标）</td>
<td>将链接拖到标签页中</td>
<td>将链接拖到标签页中</td>
</tr>
<tr>
<td>在新的后台标签页中打开链接</td>
<td>按住 Ctrl 键的同时点击链接</td>
<td>按住 ⌘ 键的同时点击链接</td>
</tr>
<tr>
<td>打开链接，并跳转到该链接</td>
<td>按住 Ctrl + Shift 键的同时点击链接</td>
<td>按住 ⌘ + Shift 键的同时点击链接</td>
</tr>
<tr>
<td>打开链接，并跳转到该链接（仅使用鼠标）</td>
<td>将链接拖到标签栏的空白区域</td>
<td></td>
</tr>
<tr>
<td>在新窗口中打开链接</td>
<td>按住 Shift 键的同时点击链接</td>
<td></td>
</tr>
<tr>
<td>在新窗口中打开标签页（仅使用鼠标）</td>
<td>将标签页拖出标签栏</td>
<td></td>
</tr>
<tr>
<td>将标签页移至当前窗口（仅限鼠标）</td>
<td>将标签页拖到现有窗口中</td>
<td></td>
</tr>
<tr>
<td>将标签页移回其原始位置</td>
<td>拖动标签页的同时按 Esc</td>
<td></td>
</tr>
<tr>
<td>将当前网页保存为书签</td>
<td>将相应网址拖动到书签栏中</td>
<td></td>
</tr>
<tr>
<td>下载链接目标</td>
<td>按住 Alt 键的同时点击链接</td>
<td>按住 Option 键的同时点击链接</td>
</tr>
<tr>
<td>显示浏览记录</td>
<td>右键点击“后退”箭头 返回 或“前进”箭头 下一个，或者点击并按住“后退”箭头 返回 或“前进”箭头 下一个</td>
<td></td>
</tr>
<tr>
<td>最大化或最小化窗口</td>
<td>双击标签栏的空白区域</td>
<td></td>
</tr>
<tr>
<td>放大网页上的所有内容</td>
<td>按住 Ctrl 键的同时向上滚动鼠标滚轮</td>
<td>按住 ⌘ 键的同时向上滚动鼠标滚轮</td>
</tr>
<tr>
<td>缩小网页上的所有内容</td>
<td>按住 Ctrl 键的同时向下滚动鼠标滚轮</td>
<td>按住 ⌘ 键的同时向下滚动鼠标滚轮</td>
</tr>
</tbody>
</table>
<h3 id="整理数据引用地址"><a href="#整理数据引用地址" class="headerlink" title="整理数据引用地址"></a>整理数据引用地址</h3><blockquote>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/shortcuts?utm_source=dcc&amp;utm_medium=redirect&amp;utm_campaign=2016q3" title="https://developers.google.com/web/tools/chrome-devtools/shortcuts?utm_source=dcc&amp;utm_medium=redirect&amp;utm_campaign=2016q3" target="_blank" rel="external">https://developers.google.com/web/tools/chrome-devtools/shortcuts?utm_source=dcc&amp;utm_medium=redirect&amp;utm_campaign=2016q3</a></p>
<p><a href="https://support.google.com/chrome/answer/157179?hl=zh-Hans" title="https://support.google.com/chrome/answer/157179?hl=zh-Hans" target="_blank" rel="external">https://support.google.com/chrome/answer/157179?hl=zh-Hans</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;导航&quot;&gt;&lt;a href=&quot;#导航&quot; class=&quot;headerlink&quot; title=&quot;导航&quot;&gt;&lt;/a&gt;导航&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#png下载&quot;&gt;png下载&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#使用开发者工具&quot;&gt;使用开发者工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#开发者工具下的快捷键&quot;&gt;开发者工具下的快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elements&quot;&gt;Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#标签页和窗口快捷键&quot;&gt;标签页和窗口快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#功能快捷键&quot;&gt;功能快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#地址栏快捷键&quot;&gt;地址栏快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#网页快捷键&quot;&gt;网页快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#鼠标快捷键&quot;&gt;鼠标快捷键&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="chrome" scheme="//litten.me/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>qshell</title>
    <link href="//litten.me/2017/03/19/qshell/"/>
    <id>//litten.me/2017/03/19/qshell/</id>
    <published>2017-03-18T16:08:39.000Z</published>
    <updated>2017-03-20T06:20:08.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>qshell是利用<a href="http://developer.qiniu.com" target="_blank" rel="external">七牛文档上公开的API</a>实现的一个方便开发者测试和使用七牛API服务的命令行工具。该工具设计和开发的主要目的就是帮助开发者快速解决问题。目前该工具融合了七牛存储，CDN，以及其他的一些七牛服务中经常使用到的方法对应的便捷命令，比如b64decode，就是用来解码七牛的URL安全的Base64编码用的，所以这是一个面向开发者的工具，任何新的被认为适合加到该工具中的命令需求，都可以在<a href="https://github.com/qiniu/qshell/issues" target="_blank" rel="external">ISSUE列表</a>里面提出来，我们会尽快评估实现，以帮助大家更好地使用七牛服务。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>该工具使用Go语言编写而成，当然为了方便不熟悉Go或者急于使用工具来解决问题的开发者，我们提供了预先编译好的各主流操作系统平台的二进制文件供大家下载使用，由于平台的多样性，我们把这些二进制打包放到一个文件里面，请大家根据下面的说明各自选择合适的版本来使用。在文档中的例子里面，为了方便，我们统一使用<code>qshell</code>这个命令来做介绍。</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>支持平台</th>
<th>链接</th>
<th>更新日志</th>
</tr>
</thead>
<tbody>
<tr>
<td>qshell v2.0.5</td>
<td>Linux (32, 64位，arm平台), Windows(32, 64位), Mac OSX(32, 64位)</td>
<td><a href="http://devtools.qiniu.com/qshell-v2.0.5.zip" target="_blank" rel="external">下载</a></td>
<td><a href="CHANGELOG.md">查看</a></td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>该工具由于是命令行工具，所以只需要从上面的下载链接下载zip包之后解压即可使用。其中文件名和对应系统关系如下：</p>
<table>
<thead>
<tr>
<th>文件名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>qshell_linux_386</td>
<td>Linux 32位系统</td>
</tr>
<tr>
<td>qshell_linux_amd64</td>
<td>Linux 64位系统</td>
</tr>
<tr>
<td>qshell_linux_arm</td>
<td>Linux ARM CPU</td>
</tr>
<tr>
<td>qshell_windows_386.exe</td>
<td>Windows 32位系统</td>
</tr>
<tr>
<td>qshell_windows_amd64.exe</td>
<td>Windows 64位系统</td>
</tr>
<tr>
<td>qshell_darwin_386</td>
<td>Mac 32位系统，这种系统很老了</td>
</tr>
<tr>
<td>qshell_darwin_amd64</td>
<td>Mac 64位系统，主流的系统</td>
</tr>
</tbody>
</table>
<p><strong>Linux和Mac平台</strong></p>
<p>（1）权限<br>如果在Linux或者Mac系统上遇到<code>Permission Denied</code>的错误，请使用命令<code>chmod +x qshell</code>来为文件添加可执行权限。这里的<code>qshell</code>是上面文件重命名之后的简写。</p>
<p>（2）任何位置运行<br>对于Linux或者Mac，如果希望能够在任何位置都可以执行，那么可以把<code>qshell</code>所在的目录加入到环境变量<code>$PATH</code>中去。假设<code>qshell</code>命令被解压到路径<code>/home/jemy/tools</code>目录下面，那么我们可以把如下的命令写入到你所使用的bash所对应的配置文件中，如果是<code>/bin/bash</code>，那么就是<code>~/.bashrc</code>文件，如果是<code>/bin/zsh</code>，那么就是<code>~/.zshrc</code>文件中。写入的内容为：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/home/jemy/tools</span></div></pre></td></tr></table></figure>
<p>保存完毕之后，可以通过两种方式立即生效，其一为输入<code>source ~/.zshrc</code>或者<code>source ~/.bashrc</code>来使配置立即生效，或者完全关闭命令行，然后重新打开一个即可，接下来就可以在任何位置使用<code>qshell</code>命令了。</p>
<p><strong>Windows平台</strong></p>
<p>（1）闪退问题<br>本工具是一个命令行工具，在Windows下面请先打开命令行终端，然后输入工具名称执行，不要双击打开，否则会出现闪退现象。</p>
<p>（2）任何位置运行<br>如果你希望可以在任意目录下使用<code>qshell</code>，请将<code>qshell</code>工具可执行文件所在目录添加到系统的环境变量中。由于Windows系统是图形界面，所以方便一点。假设<code>qshell.exe</code>命令被解压到路径<code>E:\jemy\tools</code>目录下面，那么我们把这个目录放到系统的环境变量<code>PATH</code>里面。</p>
<p><img src="http://devtools.qiniu.com/windows-qshell-path-settings.png" alt="windows-qshell-path-settings.png"></p>
<h2 id="密钥设置"><a href="#密钥设置" class="headerlink" title="密钥设置"></a>密钥设置</h2><p>该工具有两类命令，一类需要鉴权，另一类不需要。</p>
<p>需要鉴权的命令都需要依赖七牛账号下的 <code>AccessKey</code> 和 <code>SecretKey</code>。所以这类命令运行之前，需要使用 <code>account</code> 命令来设置下 <code>AccessKey</code> ，<code>SecretKey</code> 。</p>
<p><strong>单用户模式：</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>qshell account ak sk</div></pre></td></tr></table></figure>
<p><strong>多用户模式：</strong></p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>qshell -m account ak sk</div></pre></td></tr></table></figure>
<h2 id="多用户模式"><a href="#多用户模式" class="headerlink" title="多用户模式"></a>多用户模式</h2><p>和其他的工具一样，本工具也会在使用的过程中，向本地磁盘写入一些文件，比如上面的<code>account</code>设置的 <code>AccessKey</code> 和 <code>SecretKey</code> 都是加密后保存在本地磁盘上的。另外还有<code>qupload</code>和<code>qdownload</code>功能也会向本地磁盘写入一些文件。</p>
<p>默认情况下，工具的使用模式是单用户模式，用户的所有信息写入到磁盘<code>$HOME_DIR/.qshell</code>下面。即如果你用<code>account</code>设置了新的密钥，那么这个新的密钥将覆盖旧的密钥。这个<code>$HOME_DIR</code>在Linux或者Mac下就是<code>~</code>所表示的目录。如果是Windows下则是<code>C:\Users\jemy</code>这样的路径。</p>
<p>但是有些情况下，我们可能拥有多个账号，比如同时拥有测试环境的账号和线上环境的账号，这种情况下，怎么让<code>qshell</code>同时支持多组<code>AccessKey</code>和<code>SecretKey</code>的设置呢？</p>
<p>为了解决这个问题，我们引入了选项<code>-m</code>。当在使用<code>qshell</code>的时候，指定该选项的话，就会切换到多用户模式下，在这种模式下，工具会把所有的临时文件都写到工具执行的目录。</p>
<p>基于上面的功能，我们可以创建一些专用的目录，用来切换到<code>qshell</code>的多用户模式运行。假设本地有如目录<code>/Users/jemy/Temp/qshell/workdir</code>，这个目录下分别有<code>env_dev</code>和<code>env_prod</code>两种环境的账号。</p>
<p>我们分别在目录<code>env_dev</code>和<code>env_prod</code>目录下，运行<code>qshell -m account ak sk</code>来设置不同账号的密钥对，结果如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ tree -<span class="selector-tag">a</span></div><div class="line"></div><div class="line">├── env_dev</div><div class="line">│   └── <span class="selector-class">.qshell</span></div><div class="line">│       └── account<span class="selector-class">.json</span></div><div class="line">└── env_prod</div><div class="line">    └── <span class="selector-class">.qshell</span></div><div class="line">        └── account.json</div></pre></td></tr></table></figure>
<p>这样其他的依赖<code>AccessKey</code>和<code>SecretKey</code>的命令都可以使用<code>-m</code>选项在这个目录下执行命令，例如<code>stat</code>获取文件信息：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd <span class="regexp">/Users/</span>jemy<span class="regexp">/Temp/</span>qshell<span class="regexp">/workdir/</span>env_dev</div><div class="line">$ qshell -m stat bucket key</div></pre></td></tr></table></figure>
<h2 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h2><p><a href="https://asciinema.org/a/3l4d74sb2s01lwbt2y3k83p5l" target="_blank" rel="external"><img src="https://asciinema.org/a/3l4d74sb2s01lwbt2y3k83p5l.png" alt="asciicast"></a></p>
<p>该工具还有一些有用的选项参数如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>-d</td>
<td>设置是否输出DEBUG日志，如果指定这个选项，则输出DEBUG级别的日志</td>
</tr>
<tr>
<td>-m</td>
<td>切换到多用户模式，这样所有的临时文件写入都在命令运行的目录下</td>
</tr>
<tr>
<td>-h</td>
<td>打印命令列表帮助信息，遇到参数忘记的情况下，可以使用该命令</td>
</tr>
<tr>
<td>-v</td>
<td>打印工具版本，反馈问题的时候，请提前告知工具对应版本号</td>
</tr>
</tbody>
</table>
<h2 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h2><table>
<thead>
<tr>
<th>命令</th>
<th>类别</th>
<th>描述</th>
<th>详细</th>
</tr>
</thead>
<tbody>
<tr>
<td>account</td>
<td>账号</td>
<td>设置或显示当前用户的<code>AccessKey</code>和<code>SecretKey</code></td>
<td><a href="docs/account.md">文档</a></td>
</tr>
<tr>
<td>dircache</td>
<td>存储</td>
<td>输出本地指定路径下所有的文件列表</td>
<td><a href="docs/dircache.md">文档</a></td>
</tr>
<tr>
<td>listbucket</td>
<td>存储</td>
<td>列举七牛空间里面的所有文件</td>
<td><a href="docs/listbucket.md">文档</a></td>
</tr>
<tr>
<td>prefop</td>
<td>存储</td>
<td>查询七牛数据处理的结果</td>
<td><a href="docs/prefop.md">文档</a></td>
</tr>
<tr>
<td>fput</td>
<td>存储</td>
<td>以文件表单的方式上传一个文件</td>
<td><a href="docs/fput.md">文档</a></td>
</tr>
<tr>
<td>rput</td>
<td>存储</td>
<td>以分片上传的方式上传一个文件</td>
<td><a href="docs/rput.md">文档</a></td>
</tr>
<tr>
<td>qupload</td>
<td>存储</td>
<td>同步数据到七牛空间， 带同步进度信息，和数据上传完整性检查</td>
<td><a href="docs/qupload.md">文档</a></td>
</tr>
<tr>
<td>qdownload</td>
<td>存储</td>
<td>从七牛空间同步数据到本地，支持只同步某些前缀的文件，支持增量同步</td>
<td><a href="docs/qdownload.md">文档</a></td>
</tr>
<tr>
<td>stat</td>
<td>存储</td>
<td>查询七牛空间中一个文件的基本信息</td>
<td><a href="docs/stat.md">文档</a></td>
</tr>
<tr>
<td>delete</td>
<td>存储</td>
<td>删除七牛空间中的一个文件</td>
<td><a href="docs/delete.md">文档</a></td>
</tr>
<tr>
<td>move</td>
<td>存储</td>
<td>移动或重命名七牛空间中的一个文件</td>
<td><a href="docs/move.md">文档</a></td>
</tr>
<tr>
<td>copy</td>
<td>存储</td>
<td>复制七牛空间中的一个文件</td>
<td><a href="docs/copy.md">文档</a></td>
</tr>
<tr>
<td>chgm</td>
<td>存储</td>
<td>修改七牛空间中的一个文件的MimeType</td>
<td><a href="docs/chgm.md">文档</a></td>
</tr>
<tr>
<td>fetch</td>
<td>存储</td>
<td>从Internet上抓取一个资源并存储到七牛空间中</td>
<td><a href="docs/fetch.md">文档</a></td>
</tr>
<tr>
<td>sync</td>
<td>存储</td>
<td>从Internet上抓取一个资源并存储到七牛空间中，适合大文件的场合</td>
<td><a href="docs/sync.md">文档</a></td>
</tr>
<tr>
<td>prefetch</td>
<td>存储</td>
<td>更新七牛空间中从源站镜像过来的文件</td>
<td><a href="docs/prefetch.md">文档</a></td>
</tr>
<tr>
<td>batchdelete</td>
<td>存储</td>
<td>批量删除七牛空间中的文件，可以直接根据<code>listbucket</code>的结果来删除</td>
<td><a href="docs/batchdelete.md">文档</a></td>
</tr>
<tr>
<td>batchchgm</td>
<td>存储</td>
<td>批量修改七牛空间中文件的MimeType</td>
<td><a href="docs/batchchgm.md">文档</a></td>
</tr>
<tr>
<td>batchcopy</td>
<td>存储</td>
<td>批量复制七牛空间中的文件到另一个空间</td>
<td><a href="docs/batchcopy.md">文档</a></td>
</tr>
<tr>
<td>batchmove</td>
<td>存储</td>
<td>批量移动七牛空间中的文件到另一个空间</td>
<td><a href="docs/batchmove.md">文档</a></td>
</tr>
<tr>
<td>batchrename</td>
<td>存储</td>
<td>批量重命名七牛空间中的文件</td>
<td><a href="docs/batchrename.md">文档</a></td>
</tr>
<tr>
<td>batchsign</td>
<td>存储</td>
<td>批量根据资源的公开外链生成资源的私有外链</td>
<td><a href="docs/batchsign.md">文档</a></td>
</tr>
<tr>
<td>privateurl</td>
<td>存储</td>
<td>生成私有空间资源的访问外链</td>
<td><a href="docs/privateurl.md">文档</a></td>
</tr>
<tr>
<td>saveas</td>
<td>存储</td>
<td>实时处理的saveas链接快捷生成工具</td>
<td><a href="docs/saveas.md">文档</a></td>
</tr>
<tr>
<td>reqid</td>
<td>存储</td>
<td>七牛自定义头部X-Reqid解码工具</td>
<td><a href="docs/reqid.md">文档</a></td>
</tr>
<tr>
<td>buckets</td>
<td>存储</td>
<td>获取当前账号下所有的空间名称</td>
<td><a href="docs/buckets.md">文档</a></td>
</tr>
<tr>
<td>domains</td>
<td>存储</td>
<td>获取指定空间的所有关联域名</td>
<td><a href="docs/domains.md">文档</a></td>
</tr>
<tr>
<td>qetag</td>
<td>存储</td>
<td>根据七牛的qetag算法来计算文件的hash</td>
<td><a href="docs/qetag.md">文档</a></td>
</tr>
<tr>
<td>m3u8delete</td>
<td>存储</td>
<td>根据流媒体播放列表文件删除七牛空间中的流媒体切片</td>
<td><a href="docs/m3u8delete.md">文档</a></td>
</tr>
<tr>
<td>m3u8replace</td>
<td>存储</td>
<td>修改流媒体播放列表文件中的切片引用域名</td>
<td><a href="docs/m3u8replace.md">文档</a></td>
</tr>
<tr>
<td>cdnrefresh</td>
<td>CDN</td>
<td>批量刷新cdn的访问外链或目录</td>
<td><a href="docs/cdnrefresh.md">文档</a></td>
</tr>
<tr>
<td>cdnprefetch</td>
<td>CDN</td>
<td>批量预取cdn的访问外链</td>
<td><a href="docs/cdnprefetch.md">文档</a></td>
</tr>
<tr>
<td>b64encode</td>
<td>工具</td>
<td>base64编码工具，可选是否使用UrlSafe方式，默认UrlSafe</td>
<td><a href="docs/b64encode.md">文档</a></td>
</tr>
<tr>
<td>b64decode</td>
<td>工具</td>
<td>base64解码工具，可选是否使用UrlSafe方式，默认UrlSafe</td>
<td><a href="docs/b64decode.md">文档</a></td>
</tr>
<tr>
<td>urlencode</td>
<td>工具</td>
<td>url编码工具</td>
<td><a href="docs/urlencode.md">文档</a></td>
</tr>
<tr>
<td>urldecode</td>
<td>工具</td>
<td>url解码工具</td>
<td><a href="docs/urldecode.md">文档</a></td>
</tr>
<tr>
<td>ts2d</td>
<td>工具</td>
<td>将timestamp(单位秒)转为UTC+8:00中国日期，主要用来检查上传策略的deadline参数</td>
<td><a href="docs/ts2d.md">文档</a></td>
</tr>
<tr>
<td>tms2d</td>
<td>工具</td>
<td>将timestamp(单位毫秒)转为UTC+8:00中国日期</td>
<td><a href="docs/tms2d.md">文档</a></td>
</tr>
<tr>
<td>tns2d</td>
<td>工具</td>
<td>将timestamp(单位100纳秒)转为UTC+8:00中国日期</td>
<td><a href="docs/tns2d.md">文档</a></td>
</tr>
<tr>
<td>d2ts</td>
<td>工具</td>
<td>将日期转为timestamp(单位秒)</td>
<td><a href="docs/d2ts.md">文档</a></td>
</tr>
<tr>
<td>ip</td>
<td>工具</td>
<td>根据淘宝的公开API查询ip地址的地理位置</td>
<td><a href="docs/ip.md">文档</a></td>
</tr>
<tr>
<td>unzip</td>
<td>工具</td>
<td>解压zip文件，支持UTF-8编码和GBK编码</td>
<td><a href="docs/unzip.md">文档</a></td>
</tr>
<tr>
<td>alilistbucket</td>
<td>第三方</td>
<td>列举阿里OSS空间里面的所有文件</td>
<td><a href="docs/alilistbucket.md">文档</a></td>
</tr>
</tbody>
</table>
<h2 id="项目编译"><a href="#项目编译" class="headerlink" title="项目编译"></a>项目编译</h2><p>如果对项目编译感兴趣，请按照如下方式进行：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/astaxie/beego/logs</div><div class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/fsnotify/fsnotify</div><div class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/syndtr/goleveldb/leveldb</div><div class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> github.<span class="keyword">com</span>/yanunon/oss-<span class="keyword">go</span>-api/oss</div><div class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> golang.org/<span class="keyword">x</span>/text/encoding/simplifiedchinese</div><div class="line">$ <span class="keyword">go</span> <span class="built_in">get</span> golang.org/<span class="keyword">x</span>/sys/unix</div><div class="line">$ ./build.<span class="keyword">sh</span></div></pre></td></tr></table></figure>
<p>如果上面的 <code>golang.org/x</code>  下面的包因为被墙而无法下载，那么可以使用 <code>git clone</code> 分别将依赖的库下载到本地的<code>GOPATH</code>中：</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/golang/</span>sys.git  <span class="variable">$GOPATH</span><span class="regexp">/src/g</span>olang.org<span class="regexp">/x/</span>sys</div><div class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/golang/</span>text.git <span class="variable">$GOPATH</span><span class="regexp">/src/g</span>olang.org<span class="regexp">/x/</span>text</div></pre></td></tr></table></figure>
<p>对于跨平台的编译脚本 <code>cross-build-main.sh</code> 编译出来的二进制文件存在的已知问题如下：</p>
<p><a href="https://github.com/qiniu/qshell/issues/68" target="_blank" rel="external">crontab下面引用qshell出错</a></p>
<h2 id="问题反馈"><a href="#问题反馈" class="headerlink" title="问题反馈"></a>问题反馈</h2><p>如果您有任何问题，请写在<a href="https://github.com/qiniu/qshell/issues" target="_blank" rel="external">ISSUE列表</a>里面，我们会尽快回复您。</p>
<h2 id="技术讨论"><a href="#技术讨论" class="headerlink" title="技术讨论"></a>技术讨论</h2><p>如果您希望和在工作中使用<code>qshell</code>的其他人进行交流，可以加入QQ群：343822521 。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;qshell是利用&lt;a href=&quot;http://developer.qiniu.com&quot;&gt;七牛文档上公开的API&lt;/a&gt;实现的一个方便开发者测试和使用七牛API服务的命令行工具。该工具设计和开发的主要目的就是帮助开发者快速解决问题。目前该工具融合了七牛存储，CDN，以及其他的一些七牛服务中经常使用到的方法对应的便捷命令，比如b64decode，就是用来解码七牛的URL安全的Base64编码用的，所以这是一个面向开发者的工具，任何新的被认为适合加到该工具中的命令需求，都可以在&lt;a href=&quot;https://github.com/qiniu/qshell/issues&quot;&gt;ISSUE列表&lt;/a&gt;里面提出来，我们会尽快评估实现，以帮助大家更好地使用七牛服务。&lt;/p&gt;
&lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;该工具使用Go语言编写而成，当然为了方便不熟悉Go或者急于使用工具来解决问题的开发者，我们提供了预先编译好的各主流操作系统平台的二进制文件供大家下载使用，由于平台的多样性，我们把这些二进制打包放到一个文件里面，请大家根据下面的说明各自选择合适的版本来使用。在文档中的例子里面，为了方便，我们统一使用&lt;code&gt;qshell&lt;/code&gt;这个命令来做介绍。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;支持平台&lt;/th&gt;
&lt;th&gt;链接&lt;/th&gt;
&lt;th&gt;更新日志&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;qshell v2.0.5&lt;/td&gt;
&lt;td&gt;Linux (32, 64位，arm平台), Windows(32, 64位), Mac OSX(32, 64位)&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://devtools.qiniu.com/qshell-v2.0.5.zip&quot;&gt;下载&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;CHANGELOG.md&quot;&gt;查看&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="qshell" scheme="//litten.me/tags/qshell/"/>
    
  </entry>
  
  <entry>
    <title>atom shortcuts</title>
    <link href="//litten.me/2017/03/18/atom%20shurtcuts/"/>
    <id>//litten.me/2017/03/18/atom shurtcuts/</id>
    <published>2017-03-18T07:08:25.000Z</published>
    <updated>2017-03-18T16:36:06.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件切换"><a href="#文件切换" class="headerlink" title="文件切换"></a>文件切换</h2><p><code>ctrl-shift-s</code>  保存所有打开的文件<br><code>cmd-shift-o</code>  打开目录<br><code>cmd-\</code>   显示或隐藏目录树<br><code>ctrl-0</code>   焦点移到目录树<br>目录树下，使用a，m，delete来增加，修改和删除<br><code>cmd-t</code>或<code>cmd-p</code> 查找文件<br><code>cmd-b</code> 在打开的文件之间切换<br><code>cmd-shift-b</code> 只搜索从上次git commit后修改或者新增的文件<br><a id="more"></a></p>
<h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><p>（等价于上下左右）<br><code>ctrl-p</code> 前一行<br><code>ctrl-n</code> 后一行<br><code>ctrl-f</code> 前一个字符<br><code>ctrl-b</code> 后一个字符  </p>
<p><code>alt-B</code>, <code>alt-left</code> 移动到单词开始<br><code>alt-F</code>, <code>alt-right</code> 移动到单词末尾  </p>
<p><code>cmd-right</code>, <code>ctrl-E</code> 移动到一行结束<br><code>cmd-left</code>, <code>ctrl-A</code>  移动到一行开始  </p>
<p><code>cmd-up</code> 移动到文件开始<br><code>cmd-down</code> 移动到文件结束  </p>
<p><code>ctrl-g</code> 移动到指定行 row:column 处</p>
<p><code>cmd-r</code> 在方法之间跳转</p>
<h2 id="目录树操作"><a href="#目录树操作" class="headerlink" title="目录树操作"></a>目录树操作</h2><p><code>cmd-\</code> 或者 <code>cmd-k cmd-b</code> 显示(隐藏)目录树<br><code>ctrl-0</code> 焦点切换到目录树(再按一次或者<code>Esc</code>退出目录树)<br><code>a</code> 添加文件<br><code>d</code> 将当前文件另存为(duplicate)<br><code>i</code> 显示(隐藏)版本控制忽略的文件<br><code>alt-right</code> 和 <code>alt-left</code> 展开(隐藏)所有目录<br><code>ctrl-al-]</code> 和 <code>ctrl-al-[</code> 同上<br><code>ctrl-[</code> 和 <code>ctrl-]</code> 展开(隐藏)当前目录<br><code>ctrl-f</code> 和 <code>ctrl-b</code> 同上<br><code>cmd-k h</code> 或者 <code>cmd-k left</code> 在左半视图中打开文件<br><code>cmd-k j</code> 或者 <code>cmd-k down</code> 在下半视图中打开文件<br><code>cmd-k k</code> 或者 <code>cmd-k up</code> 在上半视图中打开文件<br><code>cmd-k l</code> 或者 <code>cmd-k right</code> 在右半视图中打开文件<br><code>ctrl-shift-C</code> 复制当前文件绝对路径</p>
<h2 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h2><p><code>cmd-F2</code> 在本行增加书签<br><code>F2</code> 跳到当前文件的下一条书签<br><code>shift-F2</code> 跳到当前文件的上一条书签<br><code>ctrl-F2</code> 列出当前工程所有书签  </p>
<h2 id="选取"><a href="#选取" class="headerlink" title="选取"></a>选取</h2><blockquote>
<p>大部分和导航一致，只不过加上shift  </p>
</blockquote>
<p><code>ctrl-shift-P</code>  选取至上一行<br><code>ctrl-shift-N</code>  选取至下一样<br><code>ctrl-shift-B</code>  选取至前一个字符<br><code>ctrl-shift-F</code>  选取至后一个字符<br><code>alt-shift-B</code>, <code>alt-shift-left</code>  选取至字符开始<br><code>alt-shift-F</code>, <code>alt-shift-right</code>  选取至字符结束<br><code>ctrl-shift-E</code>, <code>cmd-shift-right</code>  选取至本行结束<br><code>ctrl-shift-A</code>, <code>cmd-shift-left</code>  选取至本行开始<br><code>cmd-shift-up</code>  选取至文件开始<br><code>cmd-shift-down</code>  选取至文件结尾<br><code>cmd-A</code>  全选<br><code>cmd-L</code>  选取一行，继续按回选取下一行<br><code>ctrl-shift-W</code>  选取当前单词  </p>
<h2 id="编辑和删除文本"><a href="#编辑和删除文本" class="headerlink" title="编辑和删除文本"></a>编辑和删除文本</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><code>ctrl-T</code> 使光标前后字符交换<br><code>cmd-J</code> 将下一行与当前行合并<br><code>ctrl-cmd-up</code>, <code>ctrl-cmd-down</code> 使当前行向上或者向下移动<br><code>cmd-shift-D</code> 复制当前行到下一行<br><code>cmd-K</code>, <code>cmd-U</code> 使当前字符大写<br><code>cmd-K</code>, <code>cmd-L</code> 使当前字符小写<br><code>cmd-shift-P</code> 搜索命令  </p>
<h3 id="删除和剪切"><a href="#删除和剪切" class="headerlink" title="删除和剪切"></a>删除和剪切</h3><p><code>ctrl-shift-K</code> 删除当前行<br><code>cmd-backspace</code> 删除到当前行开始<br><code>cmd-fn-backspace</code> 删除到当前行结束<br><code>ctrl-K</code> 剪切到当前行结束<br><code>alt-backspace</code> 或 <code>alt-H</code> 删除到当前单词开始<br><code>alt-delete</code> 或 <code>alt-D</code> 删除到当前单词结束  </p>
<h3 id="多光标和多处选取"><a href="#多光标和多处选取" class="headerlink" title="多光标和多处选取"></a>多光标和多处选取</h3><p><code>cmd-click</code> 增加新光标<br><code>cmd-shift-L</code> 将多行选取改为多行光标<br><code>ctrl-shift-up</code>, <code>ctrl-shift-down</code> 增加上（下）一行光标<br><code>cmd-D</code> 选取文档中和当前单词相同的下一处<br><code>ctrl-cmd-G</code> 选取文档中所有和当前光标单词相同的位置  </p>
<h3 id="括号跳转"><a href="#括号跳转" class="headerlink" title="括号跳转"></a>括号跳转</h3><p><code>ctrl-m</code> 相应括号之间，html tag之间等跳转<br><code>ctrl-cmd-m</code> 括号(tag)之间文本选取<br><code>alt-cmd-.</code> 关闭当前XML/HTML tag  </p>
<h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><p><code>ctrl-shift-U</code> 调出切换编码选项  </p>
<h2 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h2><p><code>cmd-F</code> 在buffer中查找<br><code>cmd-shift-f</code> 在整个工程中查找  </p>
<h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p><code>alt-shift-S</code> 查看当前可用代码片段  </p>
<blockquote>
<p>在<code>~/.atom</code>目录下<code>snippets.cson</code>文件中存放了你定制的snippets  </p>
</blockquote>
<p><a href="https://atom.io/docs/v1.0.0/using-atom-snippets" target="_blank" rel="external">定制说明</a>  </p>
<h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><p><code>ctrl-space</code> 提示补全信息  </p>
<h2 id="折叠"><a href="#折叠" class="headerlink" title="折叠"></a>折叠</h2><p><code>alt-cmd-[</code> 折叠<br><code>alt-cmd-]</code> 展开<br><code>alt-cmd-shift-{</code> 折叠全部<br><code>alt-cmd-shift-}</code> 展开全部<br><code>cmd-k cmd-N</code> 指定折叠层级 N为层级数  </p>
<h2 id="文件语法高亮"><a href="#文件语法高亮" class="headerlink" title="文件语法高亮"></a>文件语法高亮</h2><p><code>ctrl-shift-L</code> 选择文本类型  </p>
<h2 id="使用Atom进行写作"><a href="#使用Atom进行写作" class="headerlink" title="使用Atom进行写作"></a>使用Atom进行写作</h2><p><code>ctrl-shift-M</code> Markdown预览<br>可用代码片段</p>
<blockquote>
<p>b, legal, img, l, i, code, t, table</p>
</blockquote>
<h2 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h2><p><code>cmd-alt-Z</code> checkout HEAD 版本<br><code>cmd-shift-B</code> 弹出untracked 和 modified文件列表<br><code>alt-g down</code> <code>alt-g up</code> 在修改处跳转<br><code>alt-G D</code> 弹出diff列表<br><code>alt-G O</code> 在github上打开文件<br><code>alt-G G</code> 在github上打开项目地址<br><code>alt-G B</code> 在github上打开文件blame<br><code>alt-G H</code> 在github上打开文件history<br><code>alt-G I</code> 在github上打开issues<br><code>alt-G R</code> 在github打开分支比较<br><code>alt-G C</code> 拷贝当前文件在gihub上的网址  </p>
<h2 id="推荐一些好用的插件"><a href="#推荐一些好用的插件" class="headerlink" title="推荐一些好用的插件"></a>推荐一些好用的插件</h2><ul>
<li>主题<br><a href="https://atom.io/themes/atom-material-ui" target="_blank" rel="external">atom-material-ui</a> 好看到爆<br><a href="https://atom.io/themes/atom-material-syntax" target="_blank" rel="external">atom-material-syntax</a></li>
<li>美化<br><a href="https://atom.io/packages/atom-beautify" target="_blank" rel="external">atom-beautify</a> 一键代码美化<br><a href="https://atom.io/packages/file-icons" target="_blank" rel="external">file-icons</a> 给文件加上好看的图标<br><a href="https://atom.io/users/atom-minimap" target="_blank" rel="external">atom-minimap</a> 方便美观的缩略滚动图<br><a href="https://atom.io/packages/pretty-json" target="_blank" rel="external">pretty-json</a> json格式化工具<br><a href="https://atom.io/packages/activate-power-mode" target="_blank" rel="external">activate-power-mode</a> 炫酷的打字特效</li>
<li>git<br><a href="https://atom.io/packages/atomatigit" target="_blank" rel="external">atomatigit</a> 可视化git操作<br><a href="https://atom.io/packages/git-time-machine" target="_blank" rel="external">git-time-machine</a> git版本对比工具，可视化选择每一个commit<br><a href="https://atom.io/packages/merge-conflicts" target="_blank" rel="external">merge-conflicts</a> 合并冲突可视化工具</li>
<li>代码提示<br><a href="https://atom.io/packages/emmet" target="_blank" rel="external">emmet</a> 这个不用介绍了吧<br><a href="https://atom.io/packages/atom-ternjs" target="_blank" rel="external">atom-ternjs</a> js代码提示很强大，高度定制化<br><a href="https://atom.io/packages/docblockr" target="_blank" rel="external">docblockr</a> jsdoc 给js添加注释<br><a href="https://atom.io/packages/autoclose-html" target="_blank" rel="external">autoclose-html</a> 闭合html标签<br><a href="https://atom.io/packages/color-picker" target="_blank" rel="external">color-picker</a> 取色器 必备插件<br><a href="https://atom.io/packages/pigments" target="_blank" rel="external">pigments</a> 颜色显示插件 必装<br><a href="https://atom.io/packages/terminal-panel" target="_blank" rel="external">terminal-panel</a> 直接在atom里面写命令了<br><a href="https://atom.io/packages/svg-preview" target="_blank" rel="external">svg-preview</a> svg预览</li>
<li>便捷操作<br><a href="https://atom.io/packages/advanced-open-file" target="_blank" rel="external">advanced-open-file</a> 快速打开、切换文件<br><a href="https://atom.io/packages/project-folder" target="_blank" rel="external">project-folder</a> 快速打开、切换项目<br><a href="https://atom.io/packages/script" target="_blank" rel="external">script</a> 立即执行当前js文件</li>
<li>高亮<br><a href="https://atom.io/packages/language-vue" target="_blank" rel="external">language-vue</a> vue框架代码高亮</li>
<li>终端<br><a href="https://atom.io/packages/platformio-ide-terminal" target="_blank" rel="external">platformio-atom-ide-terminal</a> 终端插件，支持显示、隐藏及多窗口</li>
</ul>
<p>就这些了，欢迎pull更多好用的插件！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件切换&quot;&gt;&lt;a href=&quot;#文件切换&quot; class=&quot;headerlink&quot; title=&quot;文件切换&quot;&gt;&lt;/a&gt;文件切换&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ctrl-shift-s&lt;/code&gt;  保存所有打开的文件&lt;br&gt;&lt;code&gt;cmd-shift-o&lt;/code&gt;  打开目录&lt;br&gt;&lt;code&gt;cmd-\&lt;/code&gt;   显示或隐藏目录树&lt;br&gt;&lt;code&gt;ctrl-0&lt;/code&gt;   焦点移到目录树&lt;br&gt;目录树下，使用a，m，delete来增加，修改和删除&lt;br&gt;&lt;code&gt;cmd-t&lt;/code&gt;或&lt;code&gt;cmd-p&lt;/code&gt; 查找文件&lt;br&gt;&lt;code&gt;cmd-b&lt;/code&gt; 在打开的文件之间切换&lt;br&gt;&lt;code&gt;cmd-shift-b&lt;/code&gt; 只搜索从上次git commit后修改或者新增的文件&lt;br&gt;
    
    </summary>
    
    
      <category term="atom" scheme="//litten.me/tags/atom/"/>
    
  </entry>
  
</feed>
